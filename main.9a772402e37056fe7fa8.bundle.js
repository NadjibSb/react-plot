(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1094:function(module,exports,__webpack_require__){"use strict";__webpack_require__(5),__webpack_require__(47),__webpack_require__(41),__webpack_require__(33),__webpack_require__(43),__webpack_require__(1095),__webpack_require__(1096),__webpack_require__(7),__webpack_require__(42);var _clientApi=__webpack_require__(58),_clientLogger=__webpack_require__(36),_configFilename=__webpack_require__(1097);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator,!1)})),_configFilename.loaders&&_configFilename.loaders.forEach((function(loader){return(0,_clientApi.addLoader)(loader,!1)})),(_configFilename.parameters||_configFilename.globals||_configFilename.globalTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globals:_configFilename.globals,globalTypes:_configFilename.globalTypes}),!1),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},1097:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"parameters",(function(){return parameters}));var parameters={}},1098:function(module,exports,__webpack_require__){"use strict";(function(module){(0,__webpack_require__(362).configure)([__webpack_require__(1099),__webpack_require__(1100)],module,!1)}).call(this,__webpack_require__(107)(module))},1099:function(module,exports){function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=function(){return[]},webpackEmptyContext.resolve=webpackEmptyContext,module.exports=webpackEmptyContext,webpackEmptyContext.id=1099},1100:function(module,exports,__webpack_require__){var map={"./axis-boundaries.stories.tsx":1101,"./examples/iris-dataset.stories.tsx":1106,"./plot-object.stories.tsx":1110,"./plot.stories.tsx":1111};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1100},1101:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Control",(function(){return Control}));__webpack_require__(4);var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),_src_index__WEBPACK_IMPORTED_MODULE_3__=(__webpack_require__(0),__webpack_require__(24));__webpack_exports__.default={parameters:{storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import { Meta } from \'@storybook/react\';\\nimport React from \'react\';\\n\\nimport { Plot, Heading, Legend, LineSeries, Axis } from \'../src/index\';\\n\\nexport default {\\n  title: \'Plot/Axis boundaries\',\\n  component: Plot,\\n  argTypes: {\\n    width: { defaultValue: 550, control: \'number\' },\\n    height: { defaultValue: 500, control: \'number\' },\\n    xMin: { defaultValue: 0, control: \'number\' },\\n    xMax: { defaultValue: 6, control: \'number\' },\\n    yMin: { defaultValue: 0, control: \'number\' },\\n    yMax: { defaultValue: 6, control: \'number\' },\\n    paddingLeft: { defaultValue: 0.01, control: \'number\' },\\n    paddingRight: { defaultValue: 0.01, control: \'number\' },\\n    paddingTop: { defaultValue: 0.01, control: \'number\' },\\n    paddingBottom: { defaultValue: 0.01, control: \'number\' },\\n  },\\n} as Meta;\\n\\nexport function Control(props: Record<string, number>) {\\n  const {\\n    width,\\n    height,\\n    xMin,\\n    xMax,\\n    yMax,\\n    yMin,\\n    paddingLeft,\\n    paddingRight,\\n    paddingTop,\\n    paddingBottom,\\n  } = props;\\n  return (\\n    <Plot\\n      width={width}\\n      height={height}\\n      margin={{ bottom: 50, left: 70, top: 80, right: 120 }}\\n    >\\n      <Heading\\n        title=\\"Electrical characterization\\"\\n        subtitle=\\"current vs voltage\\"\\n      />\\n      <LineSeries\\n        data={[\\n          { x: 0, y: 0 },\\n          { x: 1, y: 1 },\\n          { x: 2, y: 2 },\\n          { x: 3, y: 3 },\\n          { x: 4, y: 3 },\\n          { x: 5, y: 3 },\\n        ]}\\n        xAxis=\\"x\\"\\n        yAxis=\\"y\\"\\n        lineStyle={{ strokeWidth: 3 }}\\n        label=\\"Vg = 7V\\"\\n        displayMarker={false}\\n      />\\n      <LineSeries\\n        data={[\\n          { x: 1, y: 2 },\\n          { x: 2, y: 4 },\\n          { x: 3, y: 6 },\\n          { x: 4, y: 6 },\\n          { x: 5, y: 6 },\\n          { x: 6, y: 6 },\\n        ]}\\n        xAxis=\\"x\\"\\n        yAxis=\\"y\\"\\n        displayMarker={true}\\n        markerShape=\\"circle\\"\\n        label=\\"Vg = 3V\\"\\n      />\\n      <Axis\\n        id=\\"x\\"\\n        position=\\"bottom\\"\\n        label=\\"Drain voltage [V]\\"\\n        showGridLines={true}\\n        min={xMin}\\n        max={xMax}\\n        padding={[paddingLeft, paddingRight]}\\n      />\\n      <Axis\\n        id=\\"y\\"\\n        position=\\"left\\"\\n        label=\\"Drain current [mA]\\"\\n        showGridLines={true}\\n        labelSpace={40}\\n        min={yMin}\\n        max={yMax}\\n        padding={[paddingBottom, paddingTop]}\\n      />\\n      <Axis id=\\"y\\" position=\\"right\\" />\\n      <Axis id=\\"x\\" position=\\"top\\" />\\n      <Legend position=\\"right\\" space={45} />\\n    </Plot>\\n  );\\n}\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"Control":{"startLoc":{"col":7,"line":23},"endLoc":{"col":1,"line":100},"startBody":{"col":7,"line":23},"endBody":{"col":1,"line":100}}};\nimport { Meta } from \'@storybook/react\';\nimport React from \'react\';\n\nimport { Plot, Heading, Legend, LineSeries, Axis } from \'../src/index\';\n\nexport default {\n  title: \'Plot/Axis boundaries\',\n  component: Plot,\n  argTypes: {\n    width: { defaultValue: 550, control: \'number\' },\n    height: { defaultValue: 500, control: \'number\' },\n    xMin: { defaultValue: 0, control: \'number\' },\n    xMax: { defaultValue: 6, control: \'number\' },\n    yMin: { defaultValue: 0, control: \'number\' },\n    yMax: { defaultValue: 6, control: \'number\' },\n    paddingLeft: { defaultValue: 0.01, control: \'number\' },\n    paddingRight: { defaultValue: 0.01, control: \'number\' },\n    paddingTop: { defaultValue: 0.01, control: \'number\' },\n    paddingBottom: { defaultValue: 0.01, control: \'number\' },\n  },\n} as Meta;\n\nexport const Control = function Control(props: Record<string, number>) {\n  const {\n    width,\n    height,\n    xMin,\n    xMax,\n    yMax,\n    yMin,\n    paddingLeft,\n    paddingRight,\n    paddingTop,\n    paddingBottom,\n  } = props;\n  return (\n    <Plot\n      width={width}\n      height={height}\n      margin={{ bottom: 50, left: 70, top: 80, right: 120 }}\n    >\n      <Heading\n        title="Electrical characterization"\n        subtitle="current vs voltage"\n      />\n      <LineSeries\n        data={[\n          { x: 0, y: 0 },\n          { x: 1, y: 1 },\n          { x: 2, y: 2 },\n          { x: 3, y: 3 },\n          { x: 4, y: 3 },\n          { x: 5, y: 3 },\n        ]}\n        xAxis="x"\n        yAxis="y"\n        lineStyle={{ strokeWidth: 3 }}\n        label="Vg = 7V"\n        displayMarker={false}\n      />\n      <LineSeries\n        data={[\n          { x: 1, y: 2 },\n          { x: 2, y: 4 },\n          { x: 3, y: 6 },\n          { x: 4, y: 6 },\n          { x: 5, y: 6 },\n          { x: 6, y: 6 },\n        ]}\n        xAxis="x"\n        yAxis="y"\n        displayMarker={true}\n        markerShape="circle"\n        label="Vg = 3V"\n      />\n      <Axis\n        id="x"\n        position="bottom"\n        label="Drain voltage [V]"\n        showGridLines={true}\n        min={xMin}\n        max={xMax}\n        padding={[paddingLeft, paddingRight]}\n      />\n      <Axis\n        id="y"\n        position="left"\n        label="Drain current [mA]"\n        showGridLines={true}\n        labelSpace={40}\n        min={yMin}\n        max={yMax}\n        padding={[paddingBottom, paddingTop]}\n      />\n      <Axis id="y" position="right" />\n      <Axis id="x" position="top" />\n      <Legend position="right" space={45} />\n    </Plot>\n  );\n};\n\n\nControl.parameters = { storySource: { source: "function Control(props: Record<string, number>) {\\n  const {\\n    width,\\n    height,\\n    xMin,\\n    xMax,\\n    yMax,\\n    yMin,\\n    paddingLeft,\\n    paddingRight,\\n    paddingTop,\\n    paddingBottom,\\n  } = props;\\n  return (\\n    <Plot\\n      width={width}\\n      height={height}\\n      margin={{ bottom: 50, left: 70, top: 80, right: 120 }}\\n    >\\n      <Heading\\n        title=\\"Electrical characterization\\"\\n        subtitle=\\"current vs voltage\\"\\n      />\\n      <LineSeries\\n        data={[\\n          { x: 0, y: 0 },\\n          { x: 1, y: 1 },\\n          { x: 2, y: 2 },\\n          { x: 3, y: 3 },\\n          { x: 4, y: 3 },\\n          { x: 5, y: 3 },\\n        ]}\\n        xAxis=\\"x\\"\\n        yAxis=\\"y\\"\\n        lineStyle={{ strokeWidth: 3 }}\\n        label=\\"Vg = 7V\\"\\n        displayMarker={false}\\n      />\\n      <LineSeries\\n        data={[\\n          { x: 1, y: 2 },\\n          { x: 2, y: 4 },\\n          { x: 3, y: 6 },\\n          { x: 4, y: 6 },\\n          { x: 5, y: 6 },\\n          { x: 6, y: 6 },\\n        ]}\\n        xAxis=\\"x\\"\\n        yAxis=\\"y\\"\\n        displayMarker={true}\\n        markerShape=\\"circle\\"\\n        label=\\"Vg = 3V\\"\\n      />\\n      <Axis\\n        id=\\"x\\"\\n        position=\\"bottom\\"\\n        label=\\"Drain voltage [V]\\"\\n        showGridLines={true}\\n        min={xMin}\\n        max={xMax}\\n        padding={[paddingLeft, paddingRight]}\\n      />\\n      <Axis\\n        id=\\"y\\"\\n        position=\\"left\\"\\n        label=\\"Drain current [mA]\\"\\n        showGridLines={true}\\n        labelSpace={40}\\n        min={yMin}\\n        max={yMax}\\n        padding={[paddingBottom, paddingTop]}\\n      />\\n      <Axis id=\\"y\\" position=\\"right\\" />\\n      <Axis id=\\"x\\" position=\\"top\\" />\\n      <Legend position=\\"right\\" space={45} />\\n    </Plot>\\n  );\\n}" }, ...Control.parameters };\n',locationsMap:{control:{startLoc:{col:23,line:30},endLoc:{col:1,line:107},startBody:{col:23,line:30},endBody:{col:1,line:107}}}}},title:"Plot/Axis boundaries",component:_src_index__WEBPACK_IMPORTED_MODULE_3__.e,argTypes:{width:{defaultValue:550,control:"number"},height:{defaultValue:500,control:"number"},xMin:{defaultValue:0,control:"number"},xMax:{defaultValue:6,control:"number"},yMin:{defaultValue:0,control:"number"},yMax:{defaultValue:6,control:"number"},paddingLeft:{defaultValue:.01,control:"number"},paddingRight:{defaultValue:.01,control:"number"},paddingTop:{defaultValue:.01,control:"number"},paddingBottom:{defaultValue:.01,control:"number"}}};var Control=function Control(props){var width=props.width,height=props.height,xMin=props.xMin,xMax=props.xMax,yMax=props.yMax,yMin=props.yMin,paddingLeft=props.paddingLeft,paddingRight=props.paddingRight,paddingTop=props.paddingTop,paddingBottom=props.paddingBottom;return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_src_index__WEBPACK_IMPORTED_MODULE_3__.e,{width:width,height:height,margin:{bottom:50,left:70,top:80,right:120},children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.b,{title:"Electrical characterization",subtitle:"current vs voltage"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.d,{data:[{x:0,y:0},{x:1,y:1},{x:2,y:2},{x:3,y:3},{x:4,y:3},{x:5,y:3}],xAxis:"x",yAxis:"y",lineStyle:{strokeWidth:3},label:"Vg = 7V",displayMarker:!1}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.d,{data:[{x:1,y:2},{x:2,y:4},{x:3,y:6},{x:4,y:6},{x:5,y:6},{x:6,y:6}],xAxis:"x",yAxis:"y",displayMarker:!0,markerShape:"circle",label:"Vg = 3V"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.a,{id:"x",position:"bottom",label:"Drain voltage [V]",showGridLines:!0,min:xMin,max:xMax,padding:[paddingLeft,paddingRight]}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.a,{id:"y",position:"left",label:"Drain current [mA]",showGridLines:!0,labelSpace:40,min:yMin,max:yMax,padding:[paddingBottom,paddingTop]}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.a,{id:"y",position:"right"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.a,{id:"x",position:"top"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.c,{position:"right",space:45})]})};Control.displayName="Control",Control.parameters=Object.assign({storySource:{source:'function Control(props: Record<string, number>) {\n  const {\n    width,\n    height,\n    xMin,\n    xMax,\n    yMax,\n    yMin,\n    paddingLeft,\n    paddingRight,\n    paddingTop,\n    paddingBottom,\n  } = props;\n  return (\n    <Plot\n      width={width}\n      height={height}\n      margin={{ bottom: 50, left: 70, top: 80, right: 120 }}\n    >\n      <Heading\n        title="Electrical characterization"\n        subtitle="current vs voltage"\n      />\n      <LineSeries\n        data={[\n          { x: 0, y: 0 },\n          { x: 1, y: 1 },\n          { x: 2, y: 2 },\n          { x: 3, y: 3 },\n          { x: 4, y: 3 },\n          { x: 5, y: 3 },\n        ]}\n        xAxis="x"\n        yAxis="y"\n        lineStyle={{ strokeWidth: 3 }}\n        label="Vg = 7V"\n        displayMarker={false}\n      />\n      <LineSeries\n        data={[\n          { x: 1, y: 2 },\n          { x: 2, y: 4 },\n          { x: 3, y: 6 },\n          { x: 4, y: 6 },\n          { x: 5, y: 6 },\n          { x: 6, y: 6 },\n        ]}\n        xAxis="x"\n        yAxis="y"\n        displayMarker={true}\n        markerShape="circle"\n        label="Vg = 3V"\n      />\n      <Axis\n        id="x"\n        position="bottom"\n        label="Drain voltage [V]"\n        showGridLines={true}\n        min={xMin}\n        max={xMax}\n        padding={[paddingLeft, paddingRight]}\n      />\n      <Axis\n        id="y"\n        position="left"\n        label="Drain current [mA]"\n        showGridLines={true}\n        labelSpace={40}\n        min={yMin}\n        max={yMax}\n        padding={[paddingBottom, paddingTop]}\n      />\n      <Axis id="y" position="right" />\n      <Axis id="x" position="top" />\n      <Legend position="right" space={45} />\n    </Plot>\n  );\n}'}},Control.parameters);try{Control.displayName="Control",Control.__docgenInfo={description:"",displayName:"Control",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/axis-boundaries.stories.tsx#Control"]={docgenInfo:Control.__docgenInfo,name:"Control",path:"stories/axis-boundaries.stories.tsx#Control"})}catch(__react_docgen_typescript_loader_error){}},1106:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"PCA",(function(){return PCA}));__webpack_require__(13),__webpack_require__(15),__webpack_require__(4);var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(1),ml_dataset_iris__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(214),ml_pca__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(480),ml_regression_simple_linear__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(481),_src_index__WEBPACK_IMPORTED_MODULE_8__=(__webpack_require__(0),__webpack_require__(24));function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}__webpack_exports__.default={parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import { Meta } from '@storybook/react';\\nimport { getClasses, getNumbers, getDistinctClasses } from 'ml-dataset-iris';\\nimport { PCA as MlPCA } from 'ml-pca';\\nimport LinearRegression from 'ml-regression-simple-linear';\\nimport React, { ReactElement } from 'react';\\n\\nimport { LineSeries, Plot, ScatterSeries, Axis } from '../../src/index';\\nimport type { Series } from '../../src/types';\\n\\nexport default {\\n  title: 'Examples/Iris dataset',\\n} as Meta;\\n\\nconst dataset = getNumbers();\\nconst numFeatures = dataset[0].length;\\nconst classes = getClasses();\\nconst distinctClasses = getDistinctClasses();\\n\\nexport function PCA() {\\n  const size = 800;\\n  const pca = new MlPCA(dataset);\\n  const explainedVariance = pca.getExplainedVariance();\\n  const predicted = pca.predict(dataset);\\n\\n  const children = [];\\n  for (let pcY = 0; pcY < numFeatures; pcY++) {\\n    for (let pcX = 0; pcX < numFeatures; pcX++) {\\n      if (pcY === pcX) {\\n        children.push(\\n          <div\\n            key={`${pcX}-${pcY}`}\\n            style={{\\n              display: 'flex',\\n              flexDirection: 'column',\\n              alignItems: 'center',\\n              justifyContent: 'center',\\n            }}\\n          >\\n            <div>PC {pcY + 1}</div>\\n            <div>{Math.round(explainedVariance[pcY] * 10000) / 100}</div>\\n          </div>,\\n        );\\n      } else {\\n        const series: ReactElement[] = [];\\n\\n        for (const klass of distinctClasses) {\\n          const indices = [];\\n          for (let i = 0; i < classes.length; i++) {\\n            if (classes[i] === klass) {\\n              indices.push(i);\\n            }\\n          }\\n\\n          const predictedData = predicted.selection(indices, [pcX, pcY]);\\n          const x = predictedData.getColumn(0);\\n          const y = predictedData.getColumn(1);\\n\\n          const regression = new LinearRegression(x, y);\\n          const yRegression = x.map((val: number) => regression.predict(val));\\n\\n          let data: Series[] = new Array(x.length);\\n          let dataRegression: Series[] = new Array(x.length);\\n          for (let i = 0; i < x.length; i++) {\\n            data[i] = { x: x[i], y: y[i] };\\n            dataRegression[i] = { x: x[i], y: yRegression[i] };\\n          }\\n\\n          series.push(\\n            <ScatterSeries\\n              xAxis=\\\"x\\\"\\n              yAxis=\\\"y\\\"\\n              key={klass}\\n              data={data}\\n              label={klass}\\n              markerSize={2}\\n            />,\\n          );\\n          series.push(\\n            <LineSeries\\n              xAxis=\\\"x\\\"\\n              yAxis=\\\"y\\\"\\n              key={klass}\\n              data={dataRegression}\\n              label={klass}\\n            />,\\n          );\\n        }\\n\\n        children.push(\\n          <Plot\\n            key={`${pcX}-${pcY}`}\\n            width={size / numFeatures}\\n            height={size / numFeatures}\\n            margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\\n          >\\n            <Axis\\n              id=\\\"x\\\"\\n              position=\\\"bottom\\\"\\n              padding={[0.05, 0.05]}\\n              display={false}\\n            />\\n            <Axis\\n              id=\\\"y\\\"\\n              position=\\\"left\\\"\\n              padding={[0.05, 0.05]}\\n              display={false}\\n            />\\n            {series}\\n          </Plot>,\\n        );\\n      }\\n    }\\n  }\\n\\n  return (\\n    <div\\n      style={{\\n        display: 'grid',\\n        gridTemplateColumns: 'repeat(4, minmax(0, 1fr))',\\n        gridTemplateRows: 'repeat(4, minmax(0, 1fr))',\\n        fontFamily: 'Arial, Helvetica, sans-serif',\\n        width: 800,\\n        height: 800,\\n      }}\\n    >\\n      {children}\\n    </div>\\n  );\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"PCA\":{\"startLoc\":{\"col\":7,\"line\":19},\"endLoc\":{\"col\":1,\"line\":129},\"startBody\":{\"col\":7,\"line\":19},\"endBody\":{\"col\":1,\"line\":129}}};\nimport { Meta } from '@storybook/react';\nimport { getClasses, getNumbers, getDistinctClasses } from 'ml-dataset-iris';\nimport { PCA as MlPCA } from 'ml-pca';\nimport LinearRegression from 'ml-regression-simple-linear';\nimport React, { ReactElement } from 'react';\n\nimport { LineSeries, Plot, ScatterSeries, Axis } from '../../src/index';\nimport type { Series } from '../../src/types';\n\nexport default {\n  title: 'Examples/Iris dataset',\n} as Meta;\n\nconst dataset = getNumbers();\nconst numFeatures = dataset[0].length;\nconst classes = getClasses();\nconst distinctClasses = getDistinctClasses();\n\nexport const PCA = function PCA() {\n  const size = 800;\n  const pca = new MlPCA(dataset);\n  const explainedVariance = pca.getExplainedVariance();\n  const predicted = pca.predict(dataset);\n\n  const children = [];\n  for (let pcY = 0; pcY < numFeatures; pcY++) {\n    for (let pcX = 0; pcX < numFeatures; pcX++) {\n      if (pcY === pcX) {\n        children.push(\n          <div\n            key={`${pcX}-${pcY}`}\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <div>PC {pcY + 1}</div>\n            <div>{Math.round(explainedVariance[pcY] * 10000) / 100}</div>\n          </div>,\n        );\n      } else {\n        const series: ReactElement[] = [];\n\n        for (const klass of distinctClasses) {\n          const indices = [];\n          for (let i = 0; i < classes.length; i++) {\n            if (classes[i] === klass) {\n              indices.push(i);\n            }\n          }\n\n          const predictedData = predicted.selection(indices, [pcX, pcY]);\n          const x = predictedData.getColumn(0);\n          const y = predictedData.getColumn(1);\n\n          const regression = new LinearRegression(x, y);\n          const yRegression = x.map((val: number) => regression.predict(val));\n\n          let data: Series[] = new Array(x.length);\n          let dataRegression: Series[] = new Array(x.length);\n          for (let i = 0; i < x.length; i++) {\n            data[i] = { x: x[i], y: y[i] };\n            dataRegression[i] = { x: x[i], y: yRegression[i] };\n          }\n\n          series.push(\n            <ScatterSeries\n              xAxis=\"x\"\n              yAxis=\"y\"\n              key={klass}\n              data={data}\n              label={klass}\n              markerSize={2}\n            />,\n          );\n          series.push(\n            <LineSeries\n              xAxis=\"x\"\n              yAxis=\"y\"\n              key={klass}\n              data={dataRegression}\n              label={klass}\n            />,\n          );\n        }\n\n        children.push(\n          <Plot\n            key={`${pcX}-${pcY}`}\n            width={size / numFeatures}\n            height={size / numFeatures}\n            margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\n          >\n            <Axis\n              id=\"x\"\n              position=\"bottom\"\n              padding={[0.05, 0.05]}\n              display={false}\n            />\n            <Axis\n              id=\"y\"\n              position=\"left\"\n              padding={[0.05, 0.05]}\n              display={false}\n            />\n            {series}\n          </Plot>,\n        );\n      }\n    }\n  }\n\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridTemplateColumns: 'repeat(4, minmax(0, 1fr))',\n        gridTemplateRows: 'repeat(4, minmax(0, 1fr))',\n        fontFamily: 'Arial, Helvetica, sans-serif',\n        width: 800,\n        height: 800,\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\n\nPCA.parameters = { storySource: { source: \"function PCA() {\\n  const size = 800;\\n  const pca = new MlPCA(dataset);\\n  const explainedVariance = pca.getExplainedVariance();\\n  const predicted = pca.predict(dataset);\\n\\n  const children = [];\\n  for (let pcY = 0; pcY < numFeatures; pcY++) {\\n    for (let pcX = 0; pcX < numFeatures; pcX++) {\\n      if (pcY === pcX) {\\n        children.push(\\n          <div\\n            key={`${pcX}-${pcY}`}\\n            style={{\\n              display: 'flex',\\n              flexDirection: 'column',\\n              alignItems: 'center',\\n              justifyContent: 'center',\\n            }}\\n          >\\n            <div>PC {pcY + 1}</div>\\n            <div>{Math.round(explainedVariance[pcY] * 10000) / 100}</div>\\n          </div>,\\n        );\\n      } else {\\n        const series: ReactElement[] = [];\\n\\n        for (const klass of distinctClasses) {\\n          const indices = [];\\n          for (let i = 0; i < classes.length; i++) {\\n            if (classes[i] === klass) {\\n              indices.push(i);\\n            }\\n          }\\n\\n          const predictedData = predicted.selection(indices, [pcX, pcY]);\\n          const x = predictedData.getColumn(0);\\n          const y = predictedData.getColumn(1);\\n\\n          const regression = new LinearRegression(x, y);\\n          const yRegression = x.map((val: number) => regression.predict(val));\\n\\n          let data: Series[] = new Array(x.length);\\n          let dataRegression: Series[] = new Array(x.length);\\n          for (let i = 0; i < x.length; i++) {\\n            data[i] = { x: x[i], y: y[i] };\\n            dataRegression[i] = { x: x[i], y: yRegression[i] };\\n          }\\n\\n          series.push(\\n            <ScatterSeries\\n              xAxis=\\\"x\\\"\\n              yAxis=\\\"y\\\"\\n              key={klass}\\n              data={data}\\n              label={klass}\\n              markerSize={2}\\n            />,\\n          );\\n          series.push(\\n            <LineSeries\\n              xAxis=\\\"x\\\"\\n              yAxis=\\\"y\\\"\\n              key={klass}\\n              data={dataRegression}\\n              label={klass}\\n            />,\\n          );\\n        }\\n\\n        children.push(\\n          <Plot\\n            key={`${pcX}-${pcY}`}\\n            width={size / numFeatures}\\n            height={size / numFeatures}\\n            margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\\n          >\\n            <Axis\\n              id=\\\"x\\\"\\n              position=\\\"bottom\\\"\\n              padding={[0.05, 0.05]}\\n              display={false}\\n            />\\n            <Axis\\n              id=\\\"y\\\"\\n              position=\\\"left\\\"\\n              padding={[0.05, 0.05]}\\n              display={false}\\n            />\\n            {series}\\n          </Plot>,\\n        );\\n      }\\n    }\\n  }\\n\\n  return (\\n    <div\\n      style={{\\n        display: 'grid',\\n        gridTemplateColumns: 'repeat(4, minmax(0, 1fr))',\\n        gridTemplateRows: 'repeat(4, minmax(0, 1fr))',\\n        fontFamily: 'Arial, Helvetica, sans-serif',\\n        width: 800,\\n        height: 800,\\n      }}\\n    >\\n      {children}\\n    </div>\\n  );\\n}\" }, ...PCA.parameters };\n",locationsMap:{pca:{startLoc:{col:19,line:26},endLoc:{col:1,line:136},startBody:{col:19,line:26},endBody:{col:1,line:136}}}}},title:"Examples/Iris dataset"};var dataset=Object(ml_dataset_iris__WEBPACK_IMPORTED_MODULE_4__.getNumbers)(),numFeatures=dataset[0].length,classes=Object(ml_dataset_iris__WEBPACK_IMPORTED_MODULE_4__.getClasses)(),distinctClasses=Object(ml_dataset_iris__WEBPACK_IMPORTED_MODULE_4__.getDistinctClasses)(),PCA=function PCA(){for(var pca=new ml_pca__WEBPACK_IMPORTED_MODULE_5__.a(dataset),explainedVariance=pca.getExplainedVariance(),predicted=pca.predict(dataset),children=[],pcY=0;pcY<numFeatures;pcY++)for(var pcX=0;pcX<numFeatures;pcX++)if(pcY===pcX)children.push(Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div",{style:{display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"center"},children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div",{children:["PC ",pcY+1]}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div",{children:Math.round(1e4*explainedVariance[pcY])/100})]},"".concat(pcX,"-").concat(pcY)));else{var _step,series=[],_loop=function _loop(klass){for(var indices=[],i=0;i<classes.length;i++)classes[i]===klass&&indices.push(i);for(var predictedData=predicted.selection(indices,[pcX,pcY]),x=predictedData.getColumn(0),y=predictedData.getColumn(1),regression=new ml_regression_simple_linear__WEBPACK_IMPORTED_MODULE_6__.a(x,y),yRegression=x.map((function(val){return regression.predict(val)})),data=new Array(x.length),dataRegression=new Array(x.length),_i=0;_i<x.length;_i++)data[_i]={x:x[_i],y:y[_i]},dataRegression[_i]={x:x[_i],y:yRegression[_i]};series.push(Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_8__.g,{xAxis:"x",yAxis:"y",data:data,label:klass,markerSize:2},klass)),series.push(Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_8__.d,{xAxis:"x",yAxis:"y",data:dataRegression,label:klass},klass))},_iterator=_createForOfIteratorHelper(distinctClasses);try{for(_iterator.s();!(_step=_iterator.n()).done;){_loop(_step.value)}}catch(err){_iterator.e(err)}finally{_iterator.f()}children.push(Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_src_index__WEBPACK_IMPORTED_MODULE_8__.e,{width:800/numFeatures,height:800/numFeatures,margin:{top:0,right:0,bottom:0,left:0},children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_8__.a,{id:"x",position:"bottom",padding:[.05,.05],display:!1}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_8__.a,{id:"y",position:"left",padding:[.05,.05],display:!1}),series]},"".concat(pcX,"-").concat(pcY)))}return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div",{style:{display:"grid",gridTemplateColumns:"repeat(4, minmax(0, 1fr))",gridTemplateRows:"repeat(4, minmax(0, 1fr))",fontFamily:"Arial, Helvetica, sans-serif",width:800,height:800},children:children})};PCA.displayName="PCA",PCA.parameters=Object.assign({storySource:{source:"function PCA() {\n  const size = 800;\n  const pca = new MlPCA(dataset);\n  const explainedVariance = pca.getExplainedVariance();\n  const predicted = pca.predict(dataset);\n\n  const children = [];\n  for (let pcY = 0; pcY < numFeatures; pcY++) {\n    for (let pcX = 0; pcX < numFeatures; pcX++) {\n      if (pcY === pcX) {\n        children.push(\n          <div\n            key={`${pcX}-${pcY}`}\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <div>PC {pcY + 1}</div>\n            <div>{Math.round(explainedVariance[pcY] * 10000) / 100}</div>\n          </div>,\n        );\n      } else {\n        const series: ReactElement[] = [];\n\n        for (const klass of distinctClasses) {\n          const indices = [];\n          for (let i = 0; i < classes.length; i++) {\n            if (classes[i] === klass) {\n              indices.push(i);\n            }\n          }\n\n          const predictedData = predicted.selection(indices, [pcX, pcY]);\n          const x = predictedData.getColumn(0);\n          const y = predictedData.getColumn(1);\n\n          const regression = new LinearRegression(x, y);\n          const yRegression = x.map((val: number) => regression.predict(val));\n\n          let data: Series[] = new Array(x.length);\n          let dataRegression: Series[] = new Array(x.length);\n          for (let i = 0; i < x.length; i++) {\n            data[i] = { x: x[i], y: y[i] };\n            dataRegression[i] = { x: x[i], y: yRegression[i] };\n          }\n\n          series.push(\n            <ScatterSeries\n              xAxis=\"x\"\n              yAxis=\"y\"\n              key={klass}\n              data={data}\n              label={klass}\n              markerSize={2}\n            />,\n          );\n          series.push(\n            <LineSeries\n              xAxis=\"x\"\n              yAxis=\"y\"\n              key={klass}\n              data={dataRegression}\n              label={klass}\n            />,\n          );\n        }\n\n        children.push(\n          <Plot\n            key={`${pcX}-${pcY}`}\n            width={size / numFeatures}\n            height={size / numFeatures}\n            margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\n          >\n            <Axis\n              id=\"x\"\n              position=\"bottom\"\n              padding={[0.05, 0.05]}\n              display={false}\n            />\n            <Axis\n              id=\"y\"\n              position=\"left\"\n              padding={[0.05, 0.05]}\n              display={false}\n            />\n            {series}\n          </Plot>,\n        );\n      }\n    }\n  }\n\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridTemplateColumns: 'repeat(4, minmax(0, 1fr))',\n        gridTemplateRows: 'repeat(4, minmax(0, 1fr))',\n        fontFamily: 'Arial, Helvetica, sans-serif',\n        width: 800,\n        height: 800,\n      }}\n    >\n      {children}\n    </div>\n  );\n}"}},PCA.parameters)},1110:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Control",(function(){return Control}));__webpack_require__(4);var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),_src_index__WEBPACK_IMPORTED_MODULE_3__=(__webpack_require__(0),__webpack_require__(24));__webpack_exports__.default={parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import { Meta } from '@storybook/react';\\nimport React from 'react';\\n\\nimport { PlotObject } from '../src/index';\\nimport type { PlotObjectType } from '../src/types';\\n\\nexport default {\\n  title: 'Plot/Plot object',\\n  component: PlotObject,\\n} as Meta;\\n\\nexport function Control() {\\n  const plot: PlotObjectType = {\\n    viewportStyle: {\\n      stroke: 'black',\\n      strokeWidth: '2px',\\n      fill: '#111',\\n    },\\n    dimentions: {\\n      width: 550,\\n      height: 500,\\n      margin: { bottom: 50, left: 50, top: 60, right: 50 },\\n    },\\n    axes: [\\n      { id: 'x', label: 'My X axis', position: 'bottom', min: 0, max: 10 },\\n      { id: 'y', label: 'My Y axis', position: 'left', min: 0, max: 10 },\\n      { id: 'right', position: 'right', min: 1.5, max: 8.5 },\\n    ],\\n    series: [\\n      {\\n        type: 'line',\\n        xAxis: 'x',\\n        yAxis: 'y',\\n        label: 'My first serie',\\n        data: [\\n          { x: 1, y: 2 },\\n          { x: 2, y: 3 },\\n          { x: 3, y: 4 },\\n          { x: 4, y: 6 },\\n          { x: 7, y: 8 },\\n        ],\\n        lineStyle: { strokeWidth: '2px' },\\n      },\\n      {\\n        type: 'scatter',\\n        xAxis: 'x',\\n        yAxis: 'right',\\n        label: 'Scatter serie',\\n        data: [\\n          { x: 2, y: 8 },\\n          { x: 3, y: 7 },\\n          { x: 5, y: 4 },\\n          { x: 6, y: 4 },\\n          { x: 7, y: 2 },\\n        ],\\n      },\\n    ],\\n  };\\n  return <PlotObject plot={plot} />;\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"Control\":{\"startLoc\":{\"col\":7,\"line\":12},\"endLoc\":{\"col\":1,\"line\":60},\"startBody\":{\"col\":7,\"line\":12},\"endBody\":{\"col\":1,\"line\":60}}};\nimport { Meta } from '@storybook/react';\nimport React from 'react';\n\nimport { PlotObject } from '../src/index';\nimport type { PlotObjectType } from '../src/types';\n\nexport default {\n  title: 'Plot/Plot object',\n  component: PlotObject,\n} as Meta;\n\nexport const Control = function Control() {\n  const plot: PlotObjectType = {\n    viewportStyle: {\n      stroke: 'black',\n      strokeWidth: '2px',\n      fill: '#111',\n    },\n    dimentions: {\n      width: 550,\n      height: 500,\n      margin: { bottom: 50, left: 50, top: 60, right: 50 },\n    },\n    axes: [\n      { id: 'x', label: 'My X axis', position: 'bottom', min: 0, max: 10 },\n      { id: 'y', label: 'My Y axis', position: 'left', min: 0, max: 10 },\n      { id: 'right', position: 'right', min: 1.5, max: 8.5 },\n    ],\n    series: [\n      {\n        type: 'line',\n        xAxis: 'x',\n        yAxis: 'y',\n        label: 'My first serie',\n        data: [\n          { x: 1, y: 2 },\n          { x: 2, y: 3 },\n          { x: 3, y: 4 },\n          { x: 4, y: 6 },\n          { x: 7, y: 8 },\n        ],\n        lineStyle: { strokeWidth: '2px' },\n      },\n      {\n        type: 'scatter',\n        xAxis: 'x',\n        yAxis: 'right',\n        label: 'Scatter serie',\n        data: [\n          { x: 2, y: 8 },\n          { x: 3, y: 7 },\n          { x: 5, y: 4 },\n          { x: 6, y: 4 },\n          { x: 7, y: 2 },\n        ],\n      },\n    ],\n  };\n  return <PlotObject plot={plot} />;\n};\n\n\nControl.parameters = { storySource: { source: \"function Control() {\\n  const plot: PlotObjectType = {\\n    viewportStyle: {\\n      stroke: 'black',\\n      strokeWidth: '2px',\\n      fill: '#111',\\n    },\\n    dimentions: {\\n      width: 550,\\n      height: 500,\\n      margin: { bottom: 50, left: 50, top: 60, right: 50 },\\n    },\\n    axes: [\\n      { id: 'x', label: 'My X axis', position: 'bottom', min: 0, max: 10 },\\n      { id: 'y', label: 'My Y axis', position: 'left', min: 0, max: 10 },\\n      { id: 'right', position: 'right', min: 1.5, max: 8.5 },\\n    ],\\n    series: [\\n      {\\n        type: 'line',\\n        xAxis: 'x',\\n        yAxis: 'y',\\n        label: 'My first serie',\\n        data: [\\n          { x: 1, y: 2 },\\n          { x: 2, y: 3 },\\n          { x: 3, y: 4 },\\n          { x: 4, y: 6 },\\n          { x: 7, y: 8 },\\n        ],\\n        lineStyle: { strokeWidth: '2px' },\\n      },\\n      {\\n        type: 'scatter',\\n        xAxis: 'x',\\n        yAxis: 'right',\\n        label: 'Scatter serie',\\n        data: [\\n          { x: 2, y: 8 },\\n          { x: 3, y: 7 },\\n          { x: 5, y: 4 },\\n          { x: 6, y: 4 },\\n          { x: 7, y: 2 },\\n        ],\\n      },\\n    ],\\n  };\\n  return <PlotObject plot={plot} />;\\n}\" }, ...Control.parameters };\n",locationsMap:{control:{startLoc:{col:23,line:19},endLoc:{col:1,line:67},startBody:{col:23,line:19},endBody:{col:1,line:67}}}}},title:"Plot/Plot object",component:_src_index__WEBPACK_IMPORTED_MODULE_3__.f};var Control=function Control(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.f,{plot:{viewportStyle:{stroke:"black",strokeWidth:"2px",fill:"#111"},dimentions:{width:550,height:500,margin:{bottom:50,left:50,top:60,right:50}},axes:[{id:"x",label:"My X axis",position:"bottom",min:0,max:10},{id:"y",label:"My Y axis",position:"left",min:0,max:10},{id:"right",position:"right",min:1.5,max:8.5}],series:[{type:"line",xAxis:"x",yAxis:"y",label:"My first serie",data:[{x:1,y:2},{x:2,y:3},{x:3,y:4},{x:4,y:6},{x:7,y:8}],lineStyle:{strokeWidth:"2px"}},{type:"scatter",xAxis:"x",yAxis:"right",label:"Scatter serie",data:[{x:2,y:8},{x:3,y:7},{x:5,y:4},{x:6,y:4},{x:7,y:2}]}]}})};Control.displayName="Control",Control.parameters=Object.assign({storySource:{source:"function Control() {\n  const plot: PlotObjectType = {\n    viewportStyle: {\n      stroke: 'black',\n      strokeWidth: '2px',\n      fill: '#111',\n    },\n    dimentions: {\n      width: 550,\n      height: 500,\n      margin: { bottom: 50, left: 50, top: 60, right: 50 },\n    },\n    axes: [\n      { id: 'x', label: 'My X axis', position: 'bottom', min: 0, max: 10 },\n      { id: 'y', label: 'My Y axis', position: 'left', min: 0, max: 10 },\n      { id: 'right', position: 'right', min: 1.5, max: 8.5 },\n    ],\n    series: [\n      {\n        type: 'line',\n        xAxis: 'x',\n        yAxis: 'y',\n        label: 'My first serie',\n        data: [\n          { x: 1, y: 2 },\n          { x: 2, y: 3 },\n          { x: 3, y: 4 },\n          { x: 4, y: 6 },\n          { x: 7, y: 8 },\n        ],\n        lineStyle: { strokeWidth: '2px' },\n      },\n      {\n        type: 'scatter',\n        xAxis: 'x',\n        yAxis: 'right',\n        label: 'Scatter serie',\n        data: [\n          { x: 2, y: 8 },\n          { x: 3, y: 7 },\n          { x: 5, y: 4 },\n          { x: 6, y: 4 },\n          { x: 7, y: 2 },\n        ],\n      },\n    ],\n  };\n  return <PlotObject plot={plot} />;\n}"}},Control.parameters)},1111:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Control",(function(){return Control})),__webpack_require__.d(__webpack_exports__,"ScientificNotation",(function(){return ScientificNotation}));__webpack_require__(4);var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),_src_index__WEBPACK_IMPORTED_MODULE_3__=(__webpack_require__(0),__webpack_require__(24));__webpack_exports__.default={parameters:{storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import { Meta } from \'@storybook/react\';\\nimport React from \'react\';\\n\\nimport { Plot, Heading, Legend, LineSeries, Axis } from \'../src/index\';\\n\\nexport default {\\n  title: \'Plot/General options\',\\n  component: Plot,\\n  argTypes: {\\n    width: {\\n      defaultValue: 550,\\n      control: \'number\',\\n    },\\n    height: {\\n      defaultValue: 500,\\n      control: \'number\',\\n    },\\n    displayPlot: {\\n      defaultValue: true,\\n      control: \'boolean\',\\n    },\\n    showGridLines: {\\n      defaultValue: true,\\n      control: \'boolean\',\\n    },\\n    headingPosition: {\\n      defaultValue: \'top\',\\n      control: { type: \'select\', options: [\'top\', \'bottom\'] },\\n    },\\n    legendPosition: {\\n      defaultValue: \'right\',\\n      control: { type: \'select\', options: [\'left\', \'right\'] },\\n    },\\n    showAxis: {\\n      defaultValue: true,\\n      control: \'boolean\',\\n    },\\n    xFlip: {\\n      defaultValue: false,\\n      control: \'boolean\',\\n    },\\n    yFlip: {\\n      defaultValue: false,\\n      control: \'boolean\',\\n    },\\n  },\\n} as Meta;\\n\\nexport function Control(props) {\\n  const {\\n    displayPlot,\\n    showGridLines,\\n    width,\\n    height,\\n    headingPosition,\\n    legendPosition,\\n    showAxis,\\n    xFlip,\\n    yFlip,\\n  } = props;\\n\\n  const bottom = headingPosition === \'top\' ? 50 : 100;\\n  const left = legendPosition === \'right\' ? 70 : 150;\\n  const top = headingPosition === \'top\' ? 50 : 10;\\n  const right = legendPosition === \'right\' ? 100 : 10;\\n\\n  return (\\n    <Plot width={width} height={height} margin={{ bottom, left, top, right }}>\\n      <Heading\\n        title=\\"Electrical characterization\\"\\n        subtitle=\\"current vs voltage\\"\\n        position={headingPosition}\\n      />\\n      {displayPlot && (\\n        <LineSeries\\n          data={[\\n            { x: 0, y: 0 },\\n            { x: 1, y: 1 },\\n            { x: 2, y: 2 },\\n            { x: 3, y: 3 },\\n            { x: 4, y: 3 },\\n            { x: 5, y: 3 },\\n          ]}\\n          xAxis=\\"x\\"\\n          yAxis=\\"y\\"\\n          lineStyle={{ strokeWidth: 3 }}\\n          label=\\"Vg = 7V\\"\\n          displayMarker={false}\\n        />\\n      )}\\n      <LineSeries\\n        data={[\\n          { x: 1, y: 2 },\\n          { x: 2, y: 4 },\\n          { x: 3, y: 6 },\\n          { x: 4, y: 6 },\\n          { x: 5, y: 6 },\\n          { x: 6, y: 6 },\\n        ]}\\n        xAxis=\\"x\\"\\n        yAxis=\\"y\\"\\n        displayMarker={true}\\n        markerShape=\\"circle\\"\\n        label=\\"Vg = 3V\\"\\n      />\\n      <Axis\\n        id=\\"x\\"\\n        position=\\"bottom\\"\\n        label=\\"Drain voltage [V]\\"\\n        showGridLines={showGridLines}\\n        display={showAxis}\\n        flip={xFlip}\\n      />\\n      <Axis\\n        id=\\"y\\"\\n        position=\\"left\\"\\n        label=\\"Drain current [mA]\\"\\n        showGridLines={showGridLines}\\n        labelSpace={40}\\n        display={showAxis}\\n        flip={yFlip}\\n      />\\n      <Legend position={legendPosition} />\\n    </Plot>\\n  );\\n}\\n\\nexport function ScientificNotation() {\\n  const factor = 1000;\\n  return (\\n    <Plot\\n      width={550}\\n      height={500}\\n      margin={{ bottom: 50, left: 90, top: 50, right: 100 }}\\n    >\\n      <Heading\\n        title=\\"Electrical characterization\\"\\n        subtitle=\\"current vs voltage\\"\\n      />\\n      <LineSeries\\n        data={[\\n          { x: 0 / factor, y: 0 * factor },\\n          { x: 1 / factor, y: 1 * factor },\\n          { x: 2 / factor, y: 2 * factor },\\n          { x: 3 / factor, y: 3 * factor },\\n          { x: 4 / factor, y: 3 * factor },\\n          { x: 5 / factor, y: 3 * factor },\\n        ]}\\n        xAxis=\\"x\\"\\n        yAxis=\\"y\\"\\n        lineStyle={{ strokeWidth: 3 }}\\n        label=\\"Vg = 7V\\"\\n        displayMarker={false}\\n      />\\n      <LineSeries\\n        data={[\\n          { x: 1 / factor, y: 2 * factor },\\n          { x: 2 / factor, y: 4 * factor },\\n          { x: 3 / factor, y: 6 * factor },\\n          { x: 4 / factor, y: 6 * factor },\\n          { x: 5 / factor, y: 6 * factor },\\n          { x: 6 / factor, y: 6 * factor },\\n        ]}\\n        xAxis=\\"x\\"\\n        yAxis=\\"y\\"\\n        displayMarker={true}\\n        markerShape=\\"circle\\"\\n        label=\\"Vg = 3V\\"\\n      />\\n      <Axis\\n        id=\\"x\\"\\n        position=\\"bottom\\"\\n        label=\\"Drain voltage [V]\\"\\n        showGridLines={true}\\n        max={6.1 / factor}\\n        tickStyle={{ fontSize: \'0.8rem\' }}\\n      />\\n      <Axis\\n        id=\\"y\\"\\n        position=\\"left\\"\\n        label=\\"Drain current [mA]\\"\\n        showGridLines={true}\\n        labelSpace={50}\\n        max={6.1 * factor}\\n        tickStyle={{ fontSize: \'0.8rem\' }}\\n      />\\n      <Legend position=\\"right\\" />\\n    </Plot>\\n  );\\n}\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"Control":{"startLoc":{"col":7,"line":49},"endLoc":{"col":1,"line":126},"startBody":{"col":7,"line":49},"endBody":{"col":1,"line":126}},"ScientificNotation":{"startLoc":{"col":7,"line":128},"endLoc":{"col":1,"line":190},"startBody":{"col":7,"line":128},"endBody":{"col":1,"line":190}}};\nimport { Meta } from \'@storybook/react\';\nimport React from \'react\';\n\nimport { Plot, Heading, Legend, LineSeries, Axis } from \'../src/index\';\n\nexport default {\n  title: \'Plot/General options\',\n  component: Plot,\n  argTypes: {\n    width: {\n      defaultValue: 550,\n      control: \'number\',\n    },\n    height: {\n      defaultValue: 500,\n      control: \'number\',\n    },\n    displayPlot: {\n      defaultValue: true,\n      control: \'boolean\',\n    },\n    showGridLines: {\n      defaultValue: true,\n      control: \'boolean\',\n    },\n    headingPosition: {\n      defaultValue: \'top\',\n      control: { type: \'select\', options: [\'top\', \'bottom\'] },\n    },\n    legendPosition: {\n      defaultValue: \'right\',\n      control: { type: \'select\', options: [\'left\', \'right\'] },\n    },\n    showAxis: {\n      defaultValue: true,\n      control: \'boolean\',\n    },\n    xFlip: {\n      defaultValue: false,\n      control: \'boolean\',\n    },\n    yFlip: {\n      defaultValue: false,\n      control: \'boolean\',\n    },\n  },\n} as Meta;\n\nexport const Control = function Control(props) {\n  const {\n    displayPlot,\n    showGridLines,\n    width,\n    height,\n    headingPosition,\n    legendPosition,\n    showAxis,\n    xFlip,\n    yFlip,\n  } = props;\n\n  const bottom = headingPosition === \'top\' ? 50 : 100;\n  const left = legendPosition === \'right\' ? 70 : 150;\n  const top = headingPosition === \'top\' ? 50 : 10;\n  const right = legendPosition === \'right\' ? 100 : 10;\n\n  return (\n    <Plot width={width} height={height} margin={{ bottom, left, top, right }}>\n      <Heading\n        title="Electrical characterization"\n        subtitle="current vs voltage"\n        position={headingPosition}\n      />\n      {displayPlot && (\n        <LineSeries\n          data={[\n            { x: 0, y: 0 },\n            { x: 1, y: 1 },\n            { x: 2, y: 2 },\n            { x: 3, y: 3 },\n            { x: 4, y: 3 },\n            { x: 5, y: 3 },\n          ]}\n          xAxis="x"\n          yAxis="y"\n          lineStyle={{ strokeWidth: 3 }}\n          label="Vg = 7V"\n          displayMarker={false}\n        />\n      )}\n      <LineSeries\n        data={[\n          { x: 1, y: 2 },\n          { x: 2, y: 4 },\n          { x: 3, y: 6 },\n          { x: 4, y: 6 },\n          { x: 5, y: 6 },\n          { x: 6, y: 6 },\n        ]}\n        xAxis="x"\n        yAxis="y"\n        displayMarker={true}\n        markerShape="circle"\n        label="Vg = 3V"\n      />\n      <Axis\n        id="x"\n        position="bottom"\n        label="Drain voltage [V]"\n        showGridLines={showGridLines}\n        display={showAxis}\n        flip={xFlip}\n      />\n      <Axis\n        id="y"\n        position="left"\n        label="Drain current [mA]"\n        showGridLines={showGridLines}\n        labelSpace={40}\n        display={showAxis}\n        flip={yFlip}\n      />\n      <Legend position={legendPosition} />\n    </Plot>\n  );\n};\n\nexport const ScientificNotation = function ScientificNotation() {\n  const factor = 1000;\n  return (\n    <Plot\n      width={550}\n      height={500}\n      margin={{ bottom: 50, left: 90, top: 50, right: 100 }}\n    >\n      <Heading\n        title="Electrical characterization"\n        subtitle="current vs voltage"\n      />\n      <LineSeries\n        data={[\n          { x: 0 / factor, y: 0 * factor },\n          { x: 1 / factor, y: 1 * factor },\n          { x: 2 / factor, y: 2 * factor },\n          { x: 3 / factor, y: 3 * factor },\n          { x: 4 / factor, y: 3 * factor },\n          { x: 5 / factor, y: 3 * factor },\n        ]}\n        xAxis="x"\n        yAxis="y"\n        lineStyle={{ strokeWidth: 3 }}\n        label="Vg = 7V"\n        displayMarker={false}\n      />\n      <LineSeries\n        data={[\n          { x: 1 / factor, y: 2 * factor },\n          { x: 2 / factor, y: 4 * factor },\n          { x: 3 / factor, y: 6 * factor },\n          { x: 4 / factor, y: 6 * factor },\n          { x: 5 / factor, y: 6 * factor },\n          { x: 6 / factor, y: 6 * factor },\n        ]}\n        xAxis="x"\n        yAxis="y"\n        displayMarker={true}\n        markerShape="circle"\n        label="Vg = 3V"\n      />\n      <Axis\n        id="x"\n        position="bottom"\n        label="Drain voltage [V]"\n        showGridLines={true}\n        max={6.1 / factor}\n        tickStyle={{ fontSize: \'0.8rem\' }}\n      />\n      <Axis\n        id="y"\n        position="left"\n        label="Drain current [mA]"\n        showGridLines={true}\n        labelSpace={50}\n        max={6.1 * factor}\n        tickStyle={{ fontSize: \'0.8rem\' }}\n      />\n      <Legend position="right" />\n    </Plot>\n  );\n};\n\n\nControl.parameters = { storySource: { source: "function Control(props) {\\n  const {\\n    displayPlot,\\n    showGridLines,\\n    width,\\n    height,\\n    headingPosition,\\n    legendPosition,\\n    showAxis,\\n    xFlip,\\n    yFlip,\\n  } = props;\\n\\n  const bottom = headingPosition === \'top\' ? 50 : 100;\\n  const left = legendPosition === \'right\' ? 70 : 150;\\n  const top = headingPosition === \'top\' ? 50 : 10;\\n  const right = legendPosition === \'right\' ? 100 : 10;\\n\\n  return (\\n    <Plot width={width} height={height} margin={{ bottom, left, top, right }}>\\n      <Heading\\n        title=\\"Electrical characterization\\"\\n        subtitle=\\"current vs voltage\\"\\n        position={headingPosition}\\n      />\\n      {displayPlot && (\\n        <LineSeries\\n          data={[\\n            { x: 0, y: 0 },\\n            { x: 1, y: 1 },\\n            { x: 2, y: 2 },\\n            { x: 3, y: 3 },\\n            { x: 4, y: 3 },\\n            { x: 5, y: 3 },\\n          ]}\\n          xAxis=\\"x\\"\\n          yAxis=\\"y\\"\\n          lineStyle={{ strokeWidth: 3 }}\\n          label=\\"Vg = 7V\\"\\n          displayMarker={false}\\n        />\\n      )}\\n      <LineSeries\\n        data={[\\n          { x: 1, y: 2 },\\n          { x: 2, y: 4 },\\n          { x: 3, y: 6 },\\n          { x: 4, y: 6 },\\n          { x: 5, y: 6 },\\n          { x: 6, y: 6 },\\n        ]}\\n        xAxis=\\"x\\"\\n        yAxis=\\"y\\"\\n        displayMarker={true}\\n        markerShape=\\"circle\\"\\n        label=\\"Vg = 3V\\"\\n      />\\n      <Axis\\n        id=\\"x\\"\\n        position=\\"bottom\\"\\n        label=\\"Drain voltage [V]\\"\\n        showGridLines={showGridLines}\\n        display={showAxis}\\n        flip={xFlip}\\n      />\\n      <Axis\\n        id=\\"y\\"\\n        position=\\"left\\"\\n        label=\\"Drain current [mA]\\"\\n        showGridLines={showGridLines}\\n        labelSpace={40}\\n        display={showAxis}\\n        flip={yFlip}\\n      />\\n      <Legend position={legendPosition} />\\n    </Plot>\\n  );\\n}" }, ...Control.parameters };\nScientificNotation.parameters = { storySource: { source: "function ScientificNotation() {\\n  const factor = 1000;\\n  return (\\n    <Plot\\n      width={550}\\n      height={500}\\n      margin={{ bottom: 50, left: 90, top: 50, right: 100 }}\\n    >\\n      <Heading\\n        title=\\"Electrical characterization\\"\\n        subtitle=\\"current vs voltage\\"\\n      />\\n      <LineSeries\\n        data={[\\n          { x: 0 / factor, y: 0 * factor },\\n          { x: 1 / factor, y: 1 * factor },\\n          { x: 2 / factor, y: 2 * factor },\\n          { x: 3 / factor, y: 3 * factor },\\n          { x: 4 / factor, y: 3 * factor },\\n          { x: 5 / factor, y: 3 * factor },\\n        ]}\\n        xAxis=\\"x\\"\\n        yAxis=\\"y\\"\\n        lineStyle={{ strokeWidth: 3 }}\\n        label=\\"Vg = 7V\\"\\n        displayMarker={false}\\n      />\\n      <LineSeries\\n        data={[\\n          { x: 1 / factor, y: 2 * factor },\\n          { x: 2 / factor, y: 4 * factor },\\n          { x: 3 / factor, y: 6 * factor },\\n          { x: 4 / factor, y: 6 * factor },\\n          { x: 5 / factor, y: 6 * factor },\\n          { x: 6 / factor, y: 6 * factor },\\n        ]}\\n        xAxis=\\"x\\"\\n        yAxis=\\"y\\"\\n        displayMarker={true}\\n        markerShape=\\"circle\\"\\n        label=\\"Vg = 3V\\"\\n      />\\n      <Axis\\n        id=\\"x\\"\\n        position=\\"bottom\\"\\n        label=\\"Drain voltage [V]\\"\\n        showGridLines={true}\\n        max={6.1 / factor}\\n        tickStyle={{ fontSize: \'0.8rem\' }}\\n      />\\n      <Axis\\n        id=\\"y\\"\\n        position=\\"left\\"\\n        label=\\"Drain current [mA]\\"\\n        showGridLines={true}\\n        labelSpace={50}\\n        max={6.1 * factor}\\n        tickStyle={{ fontSize: \'0.8rem\' }}\\n      />\\n      <Legend position=\\"right\\" />\\n    </Plot>\\n  );\\n}" }, ...ScientificNotation.parameters };\n',locationsMap:{control:{startLoc:{col:23,line:56},endLoc:{col:1,line:133},startBody:{col:23,line:56},endBody:{col:1,line:133}},"scientific-notation":{startLoc:{col:34,line:135},endLoc:{col:1,line:197},startBody:{col:34,line:135},endBody:{col:1,line:197}}}}},title:"Plot/General options",component:_src_index__WEBPACK_IMPORTED_MODULE_3__.e,argTypes:{width:{defaultValue:550,control:"number"},height:{defaultValue:500,control:"number"},displayPlot:{defaultValue:!0,control:"boolean"},showGridLines:{defaultValue:!0,control:"boolean"},headingPosition:{defaultValue:"top",control:{type:"select",options:["top","bottom"]}},legendPosition:{defaultValue:"right",control:{type:"select",options:["left","right"]}},showAxis:{defaultValue:!0,control:"boolean"},xFlip:{defaultValue:!1,control:"boolean"},yFlip:{defaultValue:!1,control:"boolean"}}};var Control=function Control(props){var displayPlot=props.displayPlot,showGridLines=props.showGridLines,width=props.width,height=props.height,headingPosition=props.headingPosition,legendPosition=props.legendPosition,showAxis=props.showAxis,xFlip=props.xFlip,yFlip=props.yFlip,bottom="top"===headingPosition?50:100,left="right"===legendPosition?70:150,top="top"===headingPosition?50:10,right="right"===legendPosition?100:10;return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_src_index__WEBPACK_IMPORTED_MODULE_3__.e,{width:width,height:height,margin:{bottom:bottom,left:left,top:top,right:right},children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.b,{title:"Electrical characterization",subtitle:"current vs voltage",position:headingPosition}),displayPlot&&Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.d,{data:[{x:0,y:0},{x:1,y:1},{x:2,y:2},{x:3,y:3},{x:4,y:3},{x:5,y:3}],xAxis:"x",yAxis:"y",lineStyle:{strokeWidth:3},label:"Vg = 7V",displayMarker:!1}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.d,{data:[{x:1,y:2},{x:2,y:4},{x:3,y:6},{x:4,y:6},{x:5,y:6},{x:6,y:6}],xAxis:"x",yAxis:"y",displayMarker:!0,markerShape:"circle",label:"Vg = 3V"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.a,{id:"x",position:"bottom",label:"Drain voltage [V]",showGridLines:showGridLines,display:showAxis,flip:xFlip}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.a,{id:"y",position:"left",label:"Drain current [mA]",showGridLines:showGridLines,labelSpace:40,display:showAxis,flip:yFlip}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.c,{position:legendPosition})]})};Control.displayName="Control";var ScientificNotation=function ScientificNotation(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_src_index__WEBPACK_IMPORTED_MODULE_3__.e,{width:550,height:500,margin:{bottom:50,left:90,top:50,right:100},children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.b,{title:"Electrical characterization",subtitle:"current vs voltage"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.d,{data:[{x:0,y:0},{x:.001,y:1e3},{x:.002,y:2e3},{x:.003,y:3e3},{x:.004,y:3e3},{x:.005,y:3e3}],xAxis:"x",yAxis:"y",lineStyle:{strokeWidth:3},label:"Vg = 7V",displayMarker:!1}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.d,{data:[{x:.001,y:2e3},{x:.002,y:4e3},{x:.003,y:6e3},{x:.004,y:6e3},{x:.005,y:6e3},{x:.006,y:6e3}],xAxis:"x",yAxis:"y",displayMarker:!0,markerShape:"circle",label:"Vg = 3V"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.a,{id:"x",position:"bottom",label:"Drain voltage [V]",showGridLines:!0,max:6.1/1e3,tickStyle:{fontSize:"0.8rem"}}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.a,{id:"y",position:"left",label:"Drain current [mA]",showGridLines:!0,labelSpace:50,max:6100,tickStyle:{fontSize:"0.8rem"}}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.c,{position:"right"})]})};ScientificNotation.displayName="ScientificNotation",Control.parameters=Object.assign({storySource:{source:'function Control(props) {\n  const {\n    displayPlot,\n    showGridLines,\n    width,\n    height,\n    headingPosition,\n    legendPosition,\n    showAxis,\n    xFlip,\n    yFlip,\n  } = props;\n\n  const bottom = headingPosition === \'top\' ? 50 : 100;\n  const left = legendPosition === \'right\' ? 70 : 150;\n  const top = headingPosition === \'top\' ? 50 : 10;\n  const right = legendPosition === \'right\' ? 100 : 10;\n\n  return (\n    <Plot width={width} height={height} margin={{ bottom, left, top, right }}>\n      <Heading\n        title="Electrical characterization"\n        subtitle="current vs voltage"\n        position={headingPosition}\n      />\n      {displayPlot && (\n        <LineSeries\n          data={[\n            { x: 0, y: 0 },\n            { x: 1, y: 1 },\n            { x: 2, y: 2 },\n            { x: 3, y: 3 },\n            { x: 4, y: 3 },\n            { x: 5, y: 3 },\n          ]}\n          xAxis="x"\n          yAxis="y"\n          lineStyle={{ strokeWidth: 3 }}\n          label="Vg = 7V"\n          displayMarker={false}\n        />\n      )}\n      <LineSeries\n        data={[\n          { x: 1, y: 2 },\n          { x: 2, y: 4 },\n          { x: 3, y: 6 },\n          { x: 4, y: 6 },\n          { x: 5, y: 6 },\n          { x: 6, y: 6 },\n        ]}\n        xAxis="x"\n        yAxis="y"\n        displayMarker={true}\n        markerShape="circle"\n        label="Vg = 3V"\n      />\n      <Axis\n        id="x"\n        position="bottom"\n        label="Drain voltage [V]"\n        showGridLines={showGridLines}\n        display={showAxis}\n        flip={xFlip}\n      />\n      <Axis\n        id="y"\n        position="left"\n        label="Drain current [mA]"\n        showGridLines={showGridLines}\n        labelSpace={40}\n        display={showAxis}\n        flip={yFlip}\n      />\n      <Legend position={legendPosition} />\n    </Plot>\n  );\n}'}},Control.parameters),ScientificNotation.parameters=Object.assign({storySource:{source:'function ScientificNotation() {\n  const factor = 1000;\n  return (\n    <Plot\n      width={550}\n      height={500}\n      margin={{ bottom: 50, left: 90, top: 50, right: 100 }}\n    >\n      <Heading\n        title="Electrical characterization"\n        subtitle="current vs voltage"\n      />\n      <LineSeries\n        data={[\n          { x: 0 / factor, y: 0 * factor },\n          { x: 1 / factor, y: 1 * factor },\n          { x: 2 / factor, y: 2 * factor },\n          { x: 3 / factor, y: 3 * factor },\n          { x: 4 / factor, y: 3 * factor },\n          { x: 5 / factor, y: 3 * factor },\n        ]}\n        xAxis="x"\n        yAxis="y"\n        lineStyle={{ strokeWidth: 3 }}\n        label="Vg = 7V"\n        displayMarker={false}\n      />\n      <LineSeries\n        data={[\n          { x: 1 / factor, y: 2 * factor },\n          { x: 2 / factor, y: 4 * factor },\n          { x: 3 / factor, y: 6 * factor },\n          { x: 4 / factor, y: 6 * factor },\n          { x: 5 / factor, y: 6 * factor },\n          { x: 6 / factor, y: 6 * factor },\n        ]}\n        xAxis="x"\n        yAxis="y"\n        displayMarker={true}\n        markerShape="circle"\n        label="Vg = 3V"\n      />\n      <Axis\n        id="x"\n        position="bottom"\n        label="Drain voltage [V]"\n        showGridLines={true}\n        max={6.1 / factor}\n        tickStyle={{ fontSize: \'0.8rem\' }}\n      />\n      <Axis\n        id="y"\n        position="left"\n        label="Drain current [mA]"\n        showGridLines={true}\n        labelSpace={50}\n        max={6.1 * factor}\n        tickStyle={{ fontSize: \'0.8rem\' }}\n      />\n      <Legend position="right" />\n    </Plot>\n  );\n}'}},ScientificNotation.parameters);try{Control.displayName="Control",Control.__docgenInfo={description:"",displayName:"Control",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/plot.stories.tsx#Control"]={docgenInfo:Control.__docgenInfo,name:"Control",path:"stories/plot.stories.tsx#Control"})}catch(__react_docgen_typescript_loader_error){}},24:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"e",(function(){return Plot})),__webpack_require__.d(__webpack_exports__,"a",(function(){return Axis})),__webpack_require__.d(__webpack_exports__,"b",(function(){return Heading})),__webpack_require__.d(__webpack_exports__,"c",(function(){return Legend})),__webpack_require__.d(__webpack_exports__,"d",(function(){return LineSeries})),__webpack_require__.d(__webpack_exports__,"g",(function(){return ScatterSeries})),__webpack_require__.d(__webpack_exports__,"f",(function(){return PlotObject}));__webpack_require__(13),__webpack_require__(47),__webpack_require__(53),__webpack_require__(19),__webpack_require__(15),__webpack_require__(1103),__webpack_require__(4),__webpack_require__(7),__webpack_require__(69);var jsx_runtime=__webpack_require__(1),src_min=__webpack_require__(1130),src_max=__webpack_require__(1131),linear=__webpack_require__(1133),ordinal=__webpack_require__(1132),Set1=__webpack_require__(1135),immer_esm=__webpack_require__(479),react=__webpack_require__(0),react_default=__webpack_require__.n(react),PlotContext=Object(react.createContext)({axisContext:{}}),DispatchContext=Object(react.createContext)({dispatch:null});function usePlotContext(){var context=Object(react.useContext)(PlotContext);if(!context)throw new Error("Plot compound component outside Plot context");return context}function useDispatchContext(){var context=Object(react.useContext)(DispatchContext);if(!context)throw new Error("Plot compound component outside Dispatch context");return context}__webpack_require__(16);function BottomAxis(_ref){var id=_ref.id,showGridLines=_ref.showGridLines,display=_ref.display,label=_ref.label,labelSpace=_ref.labelSpace,labelStyle=_ref.labelStyle,fontSize=_ref.fontSize,tickStyle=_ref.tickStyle,_usePlotContext=usePlotContext(),axisContext=_usePlotContext.axisContext,plotWidth=_usePlotContext.plotWidth,top=_usePlotContext.top,bottom=_usePlotContext.bottom,left=_usePlotContext.left,height=_usePlotContext.height,_ref2=axisContext[id]||{},scale=_ref2.scale,scientific=_ref2.scientific,ticks=Object(react.useMemo)((function(){return(null==scale?void 0:scale.ticks(scientific?plotWidth/50:void 0))||[]}),[scale,scientific,plotWidth]),range=(null==scale?void 0:scale.range())||[0,0],gridlines=Object(react.useMemo)((function(){return showGridLines&&scale?Object(jsx_runtime.jsx)("g",{className:"gridLines",children:ticks.map((function(val){return Object(jsx_runtime.jsx)("line",{x1:scale(val),x2:scale(val),y1:height-bottom,y2:top,stroke:"black",strokeDasharray:"2,2",strokeOpacity:.5},val)}))}):null}),[showGridLines,ticks,top,scale,height,bottom]);return Object(jsx_runtime.jsxs)("g",{className:"axis",children:[gridlines,display&&Object(jsx_runtime.jsxs)("g",{className:"ticks",transform:"translate(0, ".concat(height-bottom,")"),children:[Object(jsx_runtime.jsx)("line",{x1:range[0],x2:range[1],stroke:"black"}),ticks.map((function(val){var x=scale(val);return Object(jsx_runtime.jsxs)("g",{children:[Object(jsx_runtime.jsx)("line",{x1:x,x2:x,y2:6,stroke:"black"}),Object(jsx_runtime.jsx)("text",{x:x,y:24,textAnchor:"middle",style:Object.assign({userSelect:"none"},tickStyle),children:scientific?val.toExponential(2):val})]},val)}))]}),label&&display&&Object(jsx_runtime.jsx)("text",{x:plotWidth/2+left,y:height-bottom+labelSpace+fontSize,fontSize:fontSize,textAnchor:"middle",style:labelStyle,children:label})]})}BottomAxis.displayName="BottomAxis";try{BottomAxis.displayName="BottomAxis",BottomAxis.__docgenInfo={description:"",displayName:"BottomAxis",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},fontSize:{defaultValue:null,description:"",name:"fontSize",required:!1,type:{name:"number"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},showGridLines:{defaultValue:null,description:"",name:"showGridLines",required:!1,type:{name:"boolean"}},labelStyle:{defaultValue:null,description:"",name:"labelStyle",required:!1,type:{name:"CSSProperties"}},tickStyle:{defaultValue:null,description:"",name:"tickStyle",required:!1,type:{name:"CSSProperties"}},labelSpace:{defaultValue:null,description:"",name:"labelSpace",required:!1,type:{name:"number"}},display:{defaultValue:null,description:"",name:"display",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Axis/BottomAxis.tsx#BottomAxis"]={docgenInfo:BottomAxis.__docgenInfo,name:"BottomAxis",path:"src/components/Axis/BottomAxis.tsx#BottomAxis"})}catch(__react_docgen_typescript_loader_error){}function LeftAxis(_ref){var id=_ref.id,showGridLines=_ref.showGridLines,display=_ref.display,label=_ref.label,labelSpace=_ref.labelSpace,labelStyle=_ref.labelStyle,fontSize=_ref.fontSize,tickStyle=_ref.tickStyle,_usePlotContext=usePlotContext(),axisContext=_usePlotContext.axisContext,plotHeight=_usePlotContext.plotHeight,top=_usePlotContext.top,left=_usePlotContext.left,width=_usePlotContext.width,right=_usePlotContext.right,_ref2=axisContext[id]||{},scale=_ref2.scale,scientific=_ref2.scientific,ticks=Object(react.useMemo)((function(){return(null==scale?void 0:scale.ticks())||[]}),[scale]),range=(null==scale?void 0:scale.range())||[0,0],gridlines=Object(react.useMemo)((function(){return showGridLines&&scale?Object(jsx_runtime.jsx)("g",{className:"gridLines",children:ticks.map((function(val){return Object(jsx_runtime.jsx)("line",{x1:left,x2:width-right,y1:scale(val),y2:scale(val),stroke:"black",strokeDasharray:"2,2",strokeOpacity:.5},val)}))}):null}),[showGridLines,ticks,scale,left,width,right]);return Object(jsx_runtime.jsxs)("g",{className:"axis",children:[gridlines,display&&Object(jsx_runtime.jsxs)("g",{className:"ticks",transform:"translate(".concat(left,", 0)"),children:[Object(jsx_runtime.jsx)("line",{y1:range[0],y2:range[1],stroke:"black"}),ticks.map((function(val){var y=scale(val);return Object(jsx_runtime.jsxs)("g",{children:[Object(jsx_runtime.jsx)("line",{x2:-6,y1:y,y2:y,stroke:"black"}),Object(jsx_runtime.jsx)("text",{x:-8,y:y,textAnchor:"end",alignmentBaseline:"middle",style:Object.assign({userSelect:"none"},tickStyle),children:scientific?val.toExponential(2):val})]},val)}))]}),label&&display&&Object(jsx_runtime.jsx)("text",{transform:"translate(".concat(left-fontSize-labelSpace-(scientific?14:0),", ").concat(top+plotHeight/2,")rotate(-90)"),dy:fontSize,textAnchor:"middle",fontSize:fontSize,style:labelStyle,children:label})]})}LeftAxis.displayName="LeftAxis";try{LeftAxis.displayName="LeftAxis",LeftAxis.__docgenInfo={description:"",displayName:"LeftAxis",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},fontSize:{defaultValue:null,description:"",name:"fontSize",required:!1,type:{name:"number"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},showGridLines:{defaultValue:null,description:"",name:"showGridLines",required:!1,type:{name:"boolean"}},labelStyle:{defaultValue:null,description:"",name:"labelStyle",required:!1,type:{name:"CSSProperties"}},tickStyle:{defaultValue:null,description:"",name:"tickStyle",required:!1,type:{name:"CSSProperties"}},labelSpace:{defaultValue:null,description:"",name:"labelSpace",required:!1,type:{name:"number"}},display:{defaultValue:null,description:"",name:"display",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Axis/LeftAxis.tsx#LeftAxis"]={docgenInfo:LeftAxis.__docgenInfo,name:"LeftAxis",path:"src/components/Axis/LeftAxis.tsx#LeftAxis"})}catch(__react_docgen_typescript_loader_error){}function RightAxis(_ref){var id=_ref.id,showGridLines=_ref.showGridLines,display=_ref.display,label=_ref.label,labelSpace=_ref.labelSpace,labelStyle=_ref.labelStyle,fontSize=_ref.fontSize,tickStyle=_ref.tickStyle,_usePlotContext=usePlotContext(),axisContext=_usePlotContext.axisContext,plotHeight=_usePlotContext.plotHeight,top=_usePlotContext.top,left=_usePlotContext.left,width=_usePlotContext.width,right=_usePlotContext.right,_ref2=axisContext[id]||{},scale=_ref2.scale,scientific=_ref2.scientific,ticks=Object(react.useMemo)((function(){return(null==scale?void 0:scale.ticks())||[]}),[scale]),range=(null==scale?void 0:scale.range())||[0,0],gridlines=Object(react.useMemo)((function(){return showGridLines&&scale?Object(jsx_runtime.jsx)("g",{className:"gridLines",children:ticks.map((function(val){return Object(jsx_runtime.jsx)("line",{x1:left,x2:width-right,y1:scale(val),y2:scale(val),stroke:"black",strokeDasharray:"2,2",strokeOpacity:.5},val)}))}):null}),[showGridLines,ticks,scale,left,width,right]);return Object(jsx_runtime.jsxs)("g",{className:"axis",children:[gridlines,display&&Object(jsx_runtime.jsxs)("g",{className:"ticks",transform:"translate(".concat(width-right,", 0)"),children:[Object(jsx_runtime.jsx)("line",{y1:range[0],y2:range[1],stroke:"black"}),ticks.map((function(val){var y=scale(val);return Object(jsx_runtime.jsxs)("g",{children:[Object(jsx_runtime.jsx)("line",{x2:6,y1:y,y2:y,stroke:"black"}),Object(jsx_runtime.jsx)("text",{x:10,y:y,textAnchor:"start",alignmentBaseline:"middle",style:Object.assign({userSelect:"none"},tickStyle),children:scientific?val.toExponential(2):val})]},val)}))]}),label&&display&&Object(jsx_runtime.jsx)("text",{transform:"translate(".concat(width-right+fontSize+labelSpace+(scientific?14:0),", ").concat(top+plotHeight/2,")rotate(90)"),dy:fontSize,textAnchor:"middle",fontSize:fontSize,style:labelStyle,children:label})]})}RightAxis.displayName="RightAxis";try{RightAxis.displayName="RightAxis",RightAxis.__docgenInfo={description:"",displayName:"RightAxis",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},fontSize:{defaultValue:null,description:"",name:"fontSize",required:!1,type:{name:"number"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},showGridLines:{defaultValue:null,description:"",name:"showGridLines",required:!1,type:{name:"boolean"}},labelStyle:{defaultValue:null,description:"",name:"labelStyle",required:!1,type:{name:"CSSProperties"}},tickStyle:{defaultValue:null,description:"",name:"tickStyle",required:!1,type:{name:"CSSProperties"}},labelSpace:{defaultValue:null,description:"",name:"labelSpace",required:!1,type:{name:"number"}},display:{defaultValue:null,description:"",name:"display",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Axis/RightAxis.tsx#RightAxis"]={docgenInfo:RightAxis.__docgenInfo,name:"RightAxis",path:"src/components/Axis/RightAxis.tsx#RightAxis"})}catch(__react_docgen_typescript_loader_error){}function TopAxis(_ref){var id=_ref.id,showGridLines=_ref.showGridLines,display=_ref.display,label=_ref.label,labelSpace=_ref.labelSpace,labelStyle=_ref.labelStyle,fontSize=_ref.fontSize,tickStyle=_ref.tickStyle,_usePlotContext=usePlotContext(),axisContext=_usePlotContext.axisContext,plotWidth=_usePlotContext.plotWidth,top=_usePlotContext.top,bottom=_usePlotContext.bottom,left=_usePlotContext.left,height=_usePlotContext.height,_ref2=axisContext[id]||{},scale=_ref2.scale,scientific=_ref2.scientific,ticks=Object(react.useMemo)((function(){return(null==scale?void 0:scale.ticks(scientific?plotWidth/50:void 0))||[]}),[scale,scientific,plotWidth]),range=(null==scale?void 0:scale.range())||[0,0],gridlines=Object(react.useMemo)((function(){return showGridLines&&scale?Object(jsx_runtime.jsx)("g",{className:"gridLines",children:ticks.map((function(val){return Object(jsx_runtime.jsx)("line",{x1:scale(val),x2:scale(val),y1:height-bottom,y2:top,stroke:"black",strokeDasharray:"2,2",strokeOpacity:.5},val)}))}):null}),[showGridLines,ticks,top,scale,height,bottom]);return Object(jsx_runtime.jsxs)("g",{className:"axis",children:[gridlines,display&&Object(jsx_runtime.jsxs)("g",{className:"ticks",transform:"translate(0, ".concat(top,")"),children:[Object(jsx_runtime.jsx)("line",{x1:range[0],x2:range[1],stroke:"black"}),ticks.map((function(val){var x=scale(val);return Object(jsx_runtime.jsxs)("g",{children:[Object(jsx_runtime.jsx)("line",{x1:x,x2:x,y2:-6,stroke:"black"}),Object(jsx_runtime.jsx)("text",{x:x,y:-12,textAnchor:"middle",style:Object.assign({userSelect:"none"},tickStyle),children:scientific?val.toExponential(2):val})]},val)}))]}),label&&display&&Object(jsx_runtime.jsx)("text",{x:plotWidth/2+left,y:top-labelSpace-fontSize,fontSize:fontSize,textAnchor:"middle",style:labelStyle,children:label})]})}TopAxis.displayName="TopAxis";try{TopAxis.displayName="TopAxis",TopAxis.__docgenInfo={description:"",displayName:"TopAxis",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},fontSize:{defaultValue:null,description:"",name:"fontSize",required:!1,type:{name:"number"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},showGridLines:{defaultValue:null,description:"",name:"showGridLines",required:!1,type:{name:"boolean"}},labelStyle:{defaultValue:null,description:"",name:"labelStyle",required:!1,type:{name:"CSSProperties"}},tickStyle:{defaultValue:null,description:"",name:"tickStyle",required:!1,type:{name:"CSSProperties"}},labelSpace:{defaultValue:null,description:"",name:"labelSpace",required:!1,type:{name:"number"}},display:{defaultValue:null,description:"",name:"display",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Axis/TopAxis.tsx#TopAxis"]={docgenInfo:TopAxis.__docgenInfo,name:"TopAxis",path:"src/components/Axis/TopAxis.tsx#TopAxis"})}catch(__react_docgen_typescript_loader_error){}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function Axis(_ref){var id=_ref.id,position=_ref.position,min=_ref.min,max=_ref.max,padding=_ref.padding,_ref$flip=_ref.flip,flip=void 0!==_ref$flip&&_ref$flip,label=_ref.label,_ref$fontSize=_ref.fontSize,fontSize=void 0===_ref$fontSize?16:_ref$fontSize,_ref$labelSpace=_ref.labelSpace,labelSpace=void 0===_ref$labelSpace?24:_ref$labelSpace,showGridLines=_ref.showGridLines,labelStyle=_ref.labelStyle,_ref$display=_ref.display,display=void 0===_ref$display||_ref$display,_ref$tickStyle=_ref.tickStyle,tickStyle=void 0===_ref$tickStyle?{}:_ref$tickStyle,dispatch=useDispatchContext().dispatch,xY=["top","bottom"].includes(position)?"x":"y";Object(react.useEffect)((function(){var _ref3=_slicedToArray(padding||[0,0],2),_ref3$=_ref3[0],minPadding=void 0===_ref3$?0:_ref3$,_ref3$2=_ref3[1],maxPadding=void 0===_ref3$2?0:_ref3$2;if(minPadding<0||minPadding>1)throw new Error("Padding ".concat(position," (").concat(minPadding,") is not between 0 and 1"));if(maxPadding<0||maxPadding>1)throw new Error("Padding ".concat(position," (").concat(maxPadding,") is not between 0 and 1"));return dispatch({type:"newAxis",value:{id:id||xY,position:position,min:min,max:max,padding:[minPadding,maxPadding],flip:flip}}),function(){return dispatch({type:"removeAxis",value:{id:id||xY}})}}),[dispatch,xY,id,position,min,max,padding,flip]);var childProps={id:id||xY,showGridLines:showGridLines,display:display,label:label,labelSpace:labelSpace,labelStyle:labelStyle,fontSize:fontSize,tickStyle:tickStyle};switch(position){case"top":return Object(jsx_runtime.jsx)(TopAxis,Object.assign({},childProps));case"bottom":return Object(jsx_runtime.jsx)(BottomAxis,Object.assign({},childProps));case"left":return Object(jsx_runtime.jsx)(LeftAxis,Object.assign({},childProps));case"right":return Object(jsx_runtime.jsx)(RightAxis,Object.assign({},childProps));default:return null}}try{Axis.displayName="Axis",Axis.__docgenInfo={description:"",displayName:"Axis",props:{id:{defaultValue:null,description:"",name:"id",required:!1,type:{name:"string"}},fontSize:{defaultValue:{value:16},description:"",name:"fontSize",required:!1,type:{name:"number"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},showGridLines:{defaultValue:null,description:"",name:"showGridLines",required:!1,type:{name:"boolean"}},labelStyle:{defaultValue:null,description:"",name:"labelStyle",required:!1,type:{name:"CSSProperties"}},tickStyle:{defaultValue:{value:"{}"},description:"",name:"tickStyle",required:!1,type:{name:"CSSProperties"}},labelSpace:{defaultValue:{value:24},description:"",name:"labelSpace",required:!1,type:{name:"number"}},display:{defaultValue:{value:!0},description:"",name:"display",required:!1,type:{name:"boolean"}},position:{defaultValue:null,description:"",name:"position",required:!0,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'},{value:'"right"'},{value:'"left"'}]}},min:{defaultValue:null,description:"",name:"min",required:!1,type:{name:"number"}},max:{defaultValue:null,description:"",name:"max",required:!1,type:{name:"number"}},padding:{defaultValue:null,description:"",name:"padding",required:!1,type:{name:"[number, number]"}},flip:{defaultValue:{value:!1},description:"",name:"flip",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Axis/index.tsx#Axis"]={docgenInfo:Axis.__docgenInfo,name:"Axis",path:"src/components/Axis/index.tsx#Axis"})}catch(__react_docgen_typescript_loader_error){}function Heading(_ref){var title=_ref.title,titleStyle=_ref.titleStyle,titleClass=_ref.titleClass,subtitle=_ref.subtitle,subtitleStyle=_ref.subtitleStyle,subtitleClass=_ref.subtitleClass,_ref$position=_ref.position,position=void 0===_ref$position?"top":_ref$position,_usePlotContext=usePlotContext(),width=_usePlotContext.width,y=function yTranslation(position,height){switch(position){case"top":return 20;case"bottom":return height+64;default:throw new Error("Unknown ".concat(JSON.stringify(position)," position"))}}(position,_usePlotContext.height-_usePlotContext.bottom);return Object(jsx_runtime.jsxs)("g",{transform:"translate(".concat(width/2,", ").concat(y,")"),children:[Object(jsx_runtime.jsx)("text",{style:Object.assign({},{textAnchor:"middle",fontSize:"16px",fontWeight:"bold"},titleStyle),className:titleClass,children:title}),subtitle&&Object(jsx_runtime.jsx)("text",{transform:"translate(0, 20)",style:Object.assign({},{textAnchor:"middle",fontSize:"14px",color:"gray"},subtitleStyle),className:subtitleClass,children:subtitle})]})}Heading.displayName="Heading";try{Heading.displayName="Heading",Heading.__docgenInfo={description:"",displayName:"Heading",props:{title:{defaultValue:null,description:"",name:"title",required:!0,type:{name:"string"}},titleStyle:{defaultValue:null,description:"",name:"titleStyle",required:!1,type:{name:"CSSProperties"}},titleClass:{defaultValue:null,description:"",name:"titleClass",required:!1,type:{name:"string"}},subtitle:{defaultValue:null,description:"",name:"subtitle",required:!1,type:{name:"string"}},subtitleStyle:{defaultValue:null,description:"",name:"subtitleStyle",required:!1,type:{name:"CSSProperties"}},subtitleClass:{defaultValue:null,description:"",name:"subtitleClass",required:!1,type:{name:"string"}},position:{defaultValue:{value:"top"},description:"",name:"position",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Heading.tsx#Heading"]={docgenInfo:Heading.__docgenInfo,name:"Heading",path:"src/components/Heading.tsx#Heading"})}catch(__react_docgen_typescript_loader_error){}function Legend_slicedToArray(arr,i){return function Legend_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function Legend_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function Legend_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return Legend_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Legend_arrayLikeToArray(o,minLen)}(arr,i)||function Legend_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Legend_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function Legend(_ref){var position=_ref.position,space=_ref.space,_usePlotContext=usePlotContext(),labels=_usePlotContext.labels,right=_usePlotContext.right,left=_usePlotContext.left,height=_usePlotContext.height,width=_usePlotContext.width,colorScaler=_usePlotContext.colorScaler,_translation2=Legend_slicedToArray(function translation(position,width,height,right,left,space){switch(position){case"right":return[width-right+(void 0===space?16:space),height/2];case"left":return[left-(void 0===space?130:space),height/2];default:throw new Error("Position ".concat(JSON.stringify(position)," unknown"))}}(position,width,height,right,left,space),2),x=_translation2[0],y=_translation2[1];return Object(jsx_runtime.jsxs)("g",{transform:"translate(".concat(x,", ").concat(y,")"),children:[null==labels?void 0:labels.map((function(_ref2,index){var id=_ref2.id;return Object(jsx_runtime.jsx)("circle",{cx:"0",cy:"".concat(index+1,"em"),r:"0.25em",fill:colorScaler(id)},"circle-".concat(id,"-").concat(index))})),null==labels?void 0:labels.map((function(_ref3,index){var label=_ref3.label;return Object(jsx_runtime.jsx)("text",{x:"0.75em",y:"".concat(index+1.25,"em"),children:label},"text-".concat(label,"-").concat(index))}))]})}Legend.displayName="Legend";try{Legend.displayName="Legend",Legend.__docgenInfo={description:"",displayName:"Legend",props:{position:{defaultValue:null,description:"",name:"position",required:!1,type:{name:"enum",value:[{value:'"right"'},{value:'"left"'}]}},space:{defaultValue:null,description:"",name:"space",required:!1,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Legend.tsx#Legend"]={docgenInfo:Legend.__docgenInfo,name:"Legend",path:"src/components/Legend.tsx#Legend"})}catch(__react_docgen_typescript_loader_error){}var extent=__webpack_require__(1129),line=__webpack_require__(1134);__webpack_require__(1104);function Circle(_ref){var x=_ref.x,y=_ref.y,fill=_ref.fill,size=_ref.size;return Object(jsx_runtime.jsx)("circle",{cx:x,cy:y,r:size,fill:fill})}function Square(_ref2){var x=_ref2.x,y=_ref2.y,fill=_ref2.fill,size=_ref2.size;return Object(jsx_runtime.jsx)("rect",{x:x-size,y:y-size,width:2*size,height:2*size,fill:fill})}function Triangle(_ref3){var x=_ref3.x,y=_ref3.y,fill=_ref3.fill,size=_ref3.size,height=y+size;return Object(jsx_runtime.jsx)("polygon",{points:"".concat(x-size,",").concat(height," ").concat(x+size,",").concat(height," ").concat(x,",").concat(y-size),fill:fill})}Circle.displayName="Circle",Square.displayName="Square",Triangle.displayName="Triangle";try{Circle.displayName="Circle",Circle.__docgenInfo={description:"",displayName:"Circle",props:{x:{defaultValue:null,description:"",name:"x",required:!0,type:{name:"number"}},y:{defaultValue:null,description:"",name:"y",required:!0,type:{name:"number"}},fill:{defaultValue:null,description:"",name:"fill",required:!0,type:{name:"string"}},size:{defaultValue:null,description:"",name:"size",required:!0,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Markers.tsx#Circle"]={docgenInfo:Circle.__docgenInfo,name:"Circle",path:"src/components/Markers.tsx#Circle"})}catch(__react_docgen_typescript_loader_error){}try{Square.displayName="Square",Square.__docgenInfo={description:"",displayName:"Square",props:{x:{defaultValue:null,description:"",name:"x",required:!0,type:{name:"number"}},y:{defaultValue:null,description:"",name:"y",required:!0,type:{name:"number"}},fill:{defaultValue:null,description:"",name:"fill",required:!0,type:{name:"string"}},size:{defaultValue:null,description:"",name:"size",required:!0,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Markers.tsx#Square"]={docgenInfo:Square.__docgenInfo,name:"Square",path:"src/components/Markers.tsx#Square"})}catch(__react_docgen_typescript_loader_error){}try{Triangle.displayName="Triangle",Triangle.__docgenInfo={description:"",displayName:"Triangle",props:{x:{defaultValue:null,description:"",name:"x",required:!0,type:{name:"number"}},y:{defaultValue:null,description:"",name:"y",required:!0,type:{name:"number"}},fill:{defaultValue:null,description:"",name:"fill",required:!0,type:{name:"string"}},size:{defaultValue:null,description:"",name:"size",required:!0,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Markers.tsx#Triangle"]={docgenInfo:Triangle.__docgenInfo,name:"Triangle",path:"src/components/Markers.tsx#Triangle"})}catch(__react_docgen_typescript_loader_error){}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function LineSeries_slicedToArray(arr,i){return function LineSeries_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function LineSeries_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function LineSeries_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return LineSeries_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return LineSeries_arrayLikeToArray(o,minLen)}(arr,i)||function LineSeries_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function LineSeries_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var markersComps={circle:Circle,square:Square,triangle:Triangle};function LineSeries(props){var id=LineSeries_slicedToArray(Object(react.useState)((function(){return"series-".concat(getNextId())})),1)[0],_props$xAxis=props.xAxis,xAxis=void 0===_props$xAxis?"x":_props$xAxis,_props$yAxis=props.yAxis,yAxis=void 0===_props$yAxis?"y":_props$yAxis,data=props.data,label=props.label,otherProps=_objectWithoutProperties(props,["xAxis","yAxis","data","label"]),dispatch=useDispatchContext().dispatch;Object(react.useEffect)((function(){var _extent2=LineSeries_slicedToArray(Object(extent.a)(data,(function(d){return d.x})),2),xMin=_extent2[0],xMax=_extent2[1],_extent4=LineSeries_slicedToArray(Object(extent.a)(data,(function(d){return d.y})),2),yMin=_extent4[0],yMax=_extent4[1];return dispatch({type:"newData",value:{id:id,x:{min:xMin,max:xMax,axisId:xAxis},y:{min:yMin,max:yMax,axisId:yAxis},label:label}}),function(){return dispatch({type:"removeData",value:{id:id}})}}),[dispatch,id,data,xAxis,yAxis,label]);var inheretedProps={data:data,id:id,xAxis:xAxis,yAxis:yAxis};return Object(jsx_runtime.jsx)(LineSeriesRender,Object.assign({},otherProps,inheretedProps))}function LineSeriesRender(_ref){var id=_ref.id,data=_ref.data,xAxis=_ref.xAxis,yAxis=_ref.yAxis,lineStyle=_ref.lineStyle,displayMarker=_ref.displayMarker,_ref$markerShape=_ref.markerShape,markerShape=void 0===_ref$markerShape?"circle":_ref$markerShape,_ref$markerSize=_ref.markerSize,markerSize=void 0===_ref$markerSize?3:_ref$markerSize,_usePlotContext=usePlotContext(),axisContext=_usePlotContext.axisContext,colorScaler=_usePlotContext.colorScaler,_validateAxis2=LineSeries_slicedToArray(validateAxis(axisContext,xAxis,yAxis),2),xScale=_validateAxis2[0],yScale=_validateAxis2[1],color=colorScaler(id),_useMemo2=LineSeries_slicedToArray(Object(react.useMemo)((function(){if([xScale,yScale].includes(void 0))return[null,null];var lineGenerator=Object(line.a)().x((function(d){return xScale(d.x)})).y((function(d){return yScale(d.y)})),Marker=markersComps[markerShape],markers=displayMarker?data.map((function(_ref2,i){var x=_ref2.x,y=_ref2.y;return Object(jsx_runtime.jsx)(Marker,{x:xScale(x),y:yScale(y),size:markerSize,fill:color},"markers-".concat(i))})):null;return[lineGenerator(data),markers]}),[xScale,yScale,color,data,displayMarker,markerSize,markerShape]),2),path=_useMemo2[0],markers=_useMemo2[1];if([xScale,yScale].includes(null))return null;var style=Object.assign({stroke:color,strokeWidth:2},lineStyle);return Object(jsx_runtime.jsxs)("g",{children:[markers,Object(jsx_runtime.jsx)("path",{style:style,d:path,fill:"none"})]})}LineSeries.displayName="LineSeries",LineSeriesRender.displayName="LineSeriesRender";try{LineSeries.displayName="LineSeries",LineSeries.__docgenInfo={description:"",displayName:"LineSeries",props:{lineStyle:{defaultValue:null,description:"",name:"lineStyle",required:!1,type:{name:"CSSProperties"}},displayMarker:{defaultValue:null,description:"",name:"displayMarker",required:!1,type:{name:"boolean"}},xAxis:{defaultValue:null,description:"",name:"xAxis",required:!1,type:{name:"string"}},yAxis:{defaultValue:null,description:"",name:"yAxis",required:!1,type:{name:"string"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"Series[]"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},markerShape:{defaultValue:null,description:"",name:"markerShape",required:!1,type:{name:"enum",value:[{value:'"circle"'},{value:'"square"'},{value:'"triangle"'}]}},markerSize:{defaultValue:null,description:"",name:"markerSize",required:!1,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/LineSeries.tsx#LineSeries"]={docgenInfo:LineSeries.__docgenInfo,name:"LineSeries",path:"src/components/LineSeries.tsx#LineSeries"})}catch(__react_docgen_typescript_loader_error){}function ScatterSeries_objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function ScatterSeries_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function ScatterSeries_slicedToArray(arr,i){return function ScatterSeries_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function ScatterSeries_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function ScatterSeries_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return ScatterSeries_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ScatterSeries_arrayLikeToArray(o,minLen)}(arr,i)||function ScatterSeries_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ScatterSeries_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var ScatterSeries_markersComps={circle:Circle,square:Square,triangle:Triangle};function ScatterSeries(props){var id=ScatterSeries_slicedToArray(Object(react.useState)((function(){return"series-".concat(getNextId())})),1)[0],_props$xAxis=props.xAxis,xAxis=void 0===_props$xAxis?"x":_props$xAxis,_props$yAxis=props.yAxis,yAxis=void 0===_props$yAxis?"y":_props$yAxis,data=props.data,label=props.label,otherProps=ScatterSeries_objectWithoutProperties(props,["xAxis","yAxis","data","label"]),dispatch=useDispatchContext().dispatch;Object(react.useEffect)((function(){var _extent2=ScatterSeries_slicedToArray(Object(extent.a)(data,(function(d){return d.x})),2),xMin=_extent2[0],xMax=_extent2[1],_extent4=ScatterSeries_slicedToArray(Object(extent.a)(data,(function(d){return d.y})),2),yMin=_extent4[0],yMax=_extent4[1];return dispatch({type:"newData",value:{id:id,x:{min:xMin,max:xMax,axisId:xAxis},y:{min:yMin,max:yMax,axisId:yAxis},label:label}}),function(){return dispatch({type:"removeData",value:{id:id}})}}),[dispatch,id,data,xAxis,yAxis,label]);var inheretedProps={data:data,id:id,xAxis:xAxis,yAxis:yAxis};return Object(jsx_runtime.jsx)(ScatterSeriesRender,Object.assign({},otherProps,inheretedProps))}function ScatterSeriesRender(_ref){var id=_ref.id,data=_ref.data,xAxis=_ref.xAxis,yAxis=_ref.yAxis,_ref$markerShape=_ref.markerShape,markerShape=void 0===_ref$markerShape?"circle":_ref$markerShape,_ref$markerSize=_ref.markerSize,markerSize=void 0===_ref$markerSize?3:_ref$markerSize,_usePlotContext=usePlotContext(),axisContext=_usePlotContext.axisContext,colorScaler=_usePlotContext.colorScaler,_validateAxis2=ScatterSeries_slicedToArray(validateAxis(axisContext,xAxis,yAxis),2),xScale=_validateAxis2[0],yScale=_validateAxis2[1],color=colorScaler(id),markers=Object(react.useMemo)((function(){if([xScale,yScale].includes(void 0))return null;var Marker=ScatterSeries_markersComps[markerShape];return data.map((function(_ref2,i){var x=_ref2.x,y=_ref2.y;return Object(jsx_runtime.jsx)(Marker,{x:xScale(x),y:yScale(y),size:markerSize,fill:color},"markers-".concat(i))}))}),[xScale,yScale,color,data,markerSize,markerShape]);return[xScale,yScale].includes(null)?null:Object(jsx_runtime.jsx)("g",{children:markers})}ScatterSeries.displayName="ScatterSeries",ScatterSeriesRender.displayName="ScatterSeriesRender";try{ScatterSeries.displayName="ScatterSeries",ScatterSeries.__docgenInfo={description:"",displayName:"ScatterSeries",props:{xAxis:{defaultValue:null,description:"",name:"xAxis",required:!1,type:{name:"string"}},yAxis:{defaultValue:null,description:"",name:"yAxis",required:!1,type:{name:"string"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"Series[]"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},markerShape:{defaultValue:null,description:"",name:"markerShape",required:!1,type:{name:"enum",value:[{value:'"circle"'},{value:'"square"'},{value:'"triangle"'}]}},markerSize:{defaultValue:null,description:"",name:"markerSize",required:!1,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/ScatterSeries.tsx#ScatterSeries"]={docgenInfo:ScatterSeries.__docgenInfo,name:"ScatterSeries",path:"src/components/ScatterSeries.tsx#ScatterSeries"})}catch(__react_docgen_typescript_loader_error){}function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function utils_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return utils_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return utils_arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function utils_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var currentValue=1;function getNextId(){return++currentValue}var horizontal=["top","bottom"],vertical=["left","right"];function validateAxis(axisContext,xKey,yKey){var xAxis=axisContext[xKey],yAxis=axisContext[yKey];if(!xAxis||!yAxis)return[void 0,void 0];if(horizontal.includes(xAxis.position)&&!vertical.includes(yAxis.position)||vertical.includes(xAxis.position)&&!horizontal.includes(yAxis.position))throw new Error("The axis ".concat(xKey," and ").concat(yKey," are not orthogonal"));return[xAxis.scale,yAxis.scale]}function Plot_typeof(obj){return(Plot_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function Plot_slicedToArray(arr,i){return function Plot_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function Plot_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function Plot_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return Plot_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Plot_arrayLikeToArray(o,minLen)}(arr,i)||function Plot_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Plot_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function Plot_objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function Plot_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var reducerCurr=Object(immer_esm.a)((function reducer(state,action){switch(action.type){case"newData":state.series.push(action.value);break;case"removeData":var id=action.value.id,seriesFiltered=state.series.filter((function(series){return series.id!==id}));state.series=seriesFiltered;break;case"newAxis":var _action$value=action.value,_id=_action$value.id,position=_action$value.position,values=Plot_objectWithoutProperties(_action$value,["id","position"]),currentAxis=state.axis[_id];currentAxis?(!function validatePosition(currPosition,position,id){if(horizontal.includes(currPosition)&&!horizontal.includes(position)||vertical.includes(currPosition)&&!vertical.includes(position))throw new Error("The positions are not ortogonal for ".concat(id))}(currentAxis.position,position,_id),state.axis[_id]=Object.assign({},currentAxis,{position:position},values)):state.axis[_id]=Object.assign({position:position},values);break;case"removeAxis":var _id2=action.value.id;delete state.axis[_id2];break;default:throw new Error("Unknown reducer type ".concat(action.type))}}));function Plot(_ref){var width=_ref.width,height=_ref.height,_ref$margin=_ref.margin,margin=void 0===_ref$margin?{}:_ref$margin,colorScheme=_ref.colorScheme,children=_ref.children,_ref$viewportStyle=_ref.viewportStyle,viewportStyle=void 0===_ref$viewportStyle?{}:_ref$viewportStyle,_useReducer2=Plot_slicedToArray(Object(react.useReducer)(reducerCurr,{series:[],axis:{}},void 0),2),state=_useReducer2[0],dispatch=_useReducer2[1],compoundComp=function splitChildren(children){var _step,invalidChild=!1,series=[],axis=[],heading=null,legend=null,_iterator=_createForOfIteratorHelper(react_default.a.Children.toArray(children));try{for(_iterator.s();!(_step=_iterator.n()).done;){var child=_step.value;"object"===_typeof(child)&&react_default.a.isValidElement(child)?child.type===LineSeries||child.type===ScatterSeries?series.push(child):child.type===Axis?axis.push(child):child.type===Heading?heading=child:child.type===Legend?legend=child:invalidChild=!0:invalidChild=!0}}catch(err){_iterator.e(err)}finally{_iterator.f()}return{invalidChild:invalidChild,series:series,axis:axis,heading:heading,legend:legend}}(children),invalidChild=compoundComp.invalidChild,series=compoundComp.series,axis=compoundComp.axis,heading=compoundComp.heading,legend=compoundComp.legend;if(invalidChild)throw new Error("Only compound components of Plot are displayed");var _margin$left=margin.left,left=void 0===_margin$left?0:_margin$left,_margin$right=margin.right,right=void 0===_margin$right?0:_margin$right,_margin$top=margin.top,top=void 0===_margin$top?0:_margin$top,_margin$bottom=margin.bottom,bottom=void 0===_margin$bottom?0:_margin$bottom,plotWidth=width-left-right,plotHeight=height-top-bottom,axisContext=Object(react.useMemo)((function(){var axisContext={},_loop=function _loop(id){var axis=state.axis[id],isHorizontal=["top","bottom"].includes(axis.position),xY=isHorizontal?"x":"y",axisMin=void 0!==axis.min?axis.min:Object(src_min.a)(state.series,(function(d){return d[xY].min})),axisMax=void 0!==axis.max?axis.max:Object(src_max.a)(state.series,(function(d){return d[xY].max}));if([axisMin,axisMax].includes(void 0))return{v:{}};if(axisMin>axisMax)throw new Error("".concat(id,": min (").concat(axisMin,") is bigger than max (").concat(axisMax,")"));var diff=axisMax-axisMin,minPad=diff*axis.padding[0],maxPad=diff*axis.padding[1],range=isHorizontal?[left,width-right]:[height-bottom,top];axisContext[id]={position:axis.position,scientific:diff<=.01||diff>=1e3,scale:Object(linear.a)().domain([axisMin-minPad,axisMax+maxPad]).range(axis.flip?range.reverse():range)}};for(var id in state.axis){var _ret=_loop(id);if("object"===Plot_typeof(_ret))return _ret.v}return axisContext}),[state,width,height,right,left,top,bottom]),labels=Object(react.useMemo)((function(){return state.series.map((function(_ref2){return{id:_ref2.id,label:_ref2.label}}))}),[state.series]),ids=Object(react.useMemo)((function(){return state.series.map((function(_ref3){return _ref3.id}))}),[state.series]),colorScaler=Object(react.useMemo)((function(){return Object(ordinal.a)().range(colorScheme||Set1.a).domain(ids)}),[colorScheme,ids]);return Object(jsx_runtime.jsx)(PlotContext.Provider,{value:{width:width,height:height,left:left,right:right,top:top,bottom:bottom,plotWidth:plotWidth,plotHeight:plotHeight,labels:labels,colorScaler:colorScaler,axisContext:axisContext},children:Object(jsx_runtime.jsx)(DispatchContext.Provider,{value:{dispatch:dispatch},children:Object(jsx_runtime.jsxs)("svg",{width:width,height:height,style:{fontFamily:"Arial, Helvetica, sans-serif"},children:[Object(jsx_runtime.jsx)("rect",{fillOpacity:"0",x:left,y:top,width:plotWidth,height:plotHeight,style:viewportStyle}),heading,legend,axis,Object(jsx_runtime.jsx)("clipPath",{id:"squareClip",children:Object(jsx_runtime.jsx)("rect",{fillOpacity:"0",x:left,y:top,width:plotWidth,height:plotHeight})}),Object(jsx_runtime.jsx)("g",{style:{clipPath:"url(#squareClip)"},children:series})]})})})}Plot.displayName="Plot";try{Plot.displayName="Plot",Plot.__docgenInfo={description:"",displayName:"Plot",props:{width:{defaultValue:null,description:"",name:"width",required:!0,type:{name:"number"}},height:{defaultValue:null,description:"",name:"height",required:!0,type:{name:"number"}},colorScheme:{defaultValue:null,description:"",name:"colorScheme",required:!1,type:{name:"Iterable<string>"}},margin:{defaultValue:{value:"{}"},description:"",name:"margin",required:!1,type:{name:'Partial<Record<"top" | "bottom" | "right" | "left", number>>'}},viewportStyle:{defaultValue:{value:"{}"},description:"",name:"viewportStyle",required:!1,type:{name:"CSSProperties"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Plot.tsx#Plot"]={docgenInfo:Plot.__docgenInfo,name:"Plot",path:"src/Plot.tsx#Plot"})}catch(__react_docgen_typescript_loader_error){}function PlotObject_objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function PlotObject_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function PlotObject(_ref){var _ref$plot=_ref.plot,dimentions=_ref$plot.dimentions,viewportStyle=_ref$plot.viewportStyle,axes=_ref$plot.axes,series=_ref$plot.series,legend=_ref$plot.legend,colorScheme=_ref$plot.colorScheme;return Object(jsx_runtime.jsxs)(Plot,Object.assign({colorScheme:colorScheme,viewportStyle:viewportStyle},dimentions,{children:[axes.map((function(props){return Object(jsx_runtime.jsx)(Axis,Object.assign({},props),props.id)})),void 0!==legend?Object(jsx_runtime.jsx)(Legend,Object.assign({},legend)):null,series.map((function(_ref2,i){var type=_ref2.type,props=PlotObject_objectWithoutProperties(_ref2,["type"]);switch(type){case"line":return Object(jsx_runtime.jsx)(LineSeries,Object.assign({},props),"lineseries-".concat(i));case"scatter":return Object(jsx_runtime.jsx)(ScatterSeries,Object.assign({},props),"scatterseries-".concat(i));default:return null}}))]}))}PlotObject.displayName="PlotObject";try{PlotObject.displayName="PlotObject",PlotObject.__docgenInfo={description:"",displayName:"PlotObject",props:{plot:{defaultValue:null,description:"",name:"plot",required:!0,type:{name:"PlotObjectType"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/PlotObject.tsx#PlotObject"]={docgenInfo:PlotObject.__docgenInfo,name:"PlotObject",path:"src/PlotObject.tsx#PlotObject"})}catch(__react_docgen_typescript_loader_error){}},485:function(module,exports,__webpack_require__){__webpack_require__(486),__webpack_require__(657),__webpack_require__(658),__webpack_require__(816),__webpack_require__(1035),__webpack_require__(1068),__webpack_require__(1073),__webpack_require__(1085),__webpack_require__(1087),__webpack_require__(1092),__webpack_require__(1094),module.exports=__webpack_require__(1098)},560:function(module,exports){},658:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(362)}},[[485,1,2]]]);
//# sourceMappingURL=main.9a772402e37056fe7fa8.bundle.js.map