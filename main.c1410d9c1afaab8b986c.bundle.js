(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1091:function(module,exports,__webpack_require__){"use strict";__webpack_require__(4),__webpack_require__(48),__webpack_require__(41),__webpack_require__(33),__webpack_require__(43),__webpack_require__(1092),__webpack_require__(1093),__webpack_require__(8),__webpack_require__(42);var _clientApi=__webpack_require__(57),_clientLogger=__webpack_require__(36),_configFilename=__webpack_require__(1094);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator,!1)})),_configFilename.loaders&&_configFilename.loaders.forEach((function(loader){return(0,_clientApi.addLoader)(loader,!1)})),(_configFilename.parameters||_configFilename.globals||_configFilename.globalTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globals:_configFilename.globals,globalTypes:_configFilename.globalTypes}),!1),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},1094:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"parameters",(function(){return parameters}));var parameters={}},1095:function(module,exports,__webpack_require__){"use strict";(function(module){(0,__webpack_require__(361).configure)([__webpack_require__(1096),__webpack_require__(1097)],module,!1)}).call(this,__webpack_require__(107)(module))},1096:function(module,exports){function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=function(){return[]},webpackEmptyContext.resolve=webpackEmptyContext,module.exports=webpackEmptyContext,webpackEmptyContext.id=1096},1097:function(module,exports,__webpack_require__){var map={"./axis-boundaries.stories.tsx":1098,"./examples/iris-dataset.stories.tsx":1102,"./plot.stories.tsx":1106};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1097},1098:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Control",(function(){return Control}));__webpack_require__(3);var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(5),_src_index__WEBPACK_IMPORTED_MODULE_3__=(__webpack_require__(0),__webpack_require__(29));__webpack_exports__.default={parameters:{storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import { Meta } from \'@storybook/react\';\\nimport React from \'react\';\\n\\nimport { Plot, Heading, Legend, LineSeries, XAxis, YAxis } from \'../src/index\';\\n\\nexport default {\\n  title: \'Plot/Axis boundaries\',\\n  component: Plot,\\n  argTypes: {\\n    width: { defaultValue: 550, control: \'number\' },\\n    height: { defaultValue: 500, control: \'number\' },\\n    xMin: { defaultValue: 0, control: \'number\' },\\n    xMax: { defaultValue: 6, control: \'number\' },\\n    yMin: { defaultValue: 0, control: \'number\' },\\n    yMax: { defaultValue: 6, control: \'number\' },\\n    paddingLeft: { defaultValue: 0.01, control: \'number\' },\\n    paddingRight: { defaultValue: 0.01, control: \'number\' },\\n    paddingTop: { defaultValue: 0.01, control: \'number\' },\\n    paddingBottom: { defaultValue: 0.01, control: \'number\' },\\n  },\\n} as Meta;\\n\\nexport function Control(props: Record<string, number>) {\\n  const {\\n    width,\\n    height,\\n    xMin,\\n    xMax,\\n    yMax,\\n    yMin,\\n    paddingLeft,\\n    paddingRight,\\n    paddingTop,\\n    paddingBottom,\\n  } = props;\\n  return (\\n    <Plot\\n      width={width}\\n      height={height}\\n      margin={{ bottom: 50, left: 70, top: 50, right: 100 }}\\n    >\\n      <Heading\\n        title=\\"Electrical characterization\\"\\n        subtitle=\\"current vs voltage\\"\\n      />\\n      <LineSeries\\n        data={{ x: [0, 1, 2, 3, 4, 5], y: [0, 1, 2, 3, 3, 3] }}\\n        lineStyle={{ strokeWidth: 3 }}\\n        label=\\"Vg = 7V\\"\\n        displayMarker={false}\\n      />\\n      <LineSeries\\n        data={{ x: [1, 2, 3, 4, 5, 6], y: [2, 4, 6, 6, 6, 6] }}\\n        displayMarker={true}\\n        markerShape=\\"circle\\"\\n        label=\\"Vg = 3V\\"\\n      />\\n      <XAxis\\n        label=\\"Drain voltage [V]\\"\\n        showGridLines={true}\\n        min={xMin}\\n        max={xMax}\\n        paddingLeft={paddingLeft}\\n        paddingRight={paddingRight}\\n      />\\n      <YAxis\\n        label=\\"Drain current [mA]\\"\\n        showGridLines={true}\\n        labelSpace={40}\\n        min={yMin}\\n        max={yMax}\\n        paddingTop={paddingTop}\\n        paddingBottom={paddingBottom}\\n      />\\n      <Legend position=\\"right\\" />\\n    </Plot>\\n  );\\n}\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"Control":{"startLoc":{"col":7,"line":23},"endLoc":{"col":1,"line":78},"startBody":{"col":7,"line":23},"endBody":{"col":1,"line":78}}};\nimport { Meta } from \'@storybook/react\';\nimport React from \'react\';\n\nimport { Plot, Heading, Legend, LineSeries, XAxis, YAxis } from \'../src/index\';\n\nexport default {\n  title: \'Plot/Axis boundaries\',\n  component: Plot,\n  argTypes: {\n    width: { defaultValue: 550, control: \'number\' },\n    height: { defaultValue: 500, control: \'number\' },\n    xMin: { defaultValue: 0, control: \'number\' },\n    xMax: { defaultValue: 6, control: \'number\' },\n    yMin: { defaultValue: 0, control: \'number\' },\n    yMax: { defaultValue: 6, control: \'number\' },\n    paddingLeft: { defaultValue: 0.01, control: \'number\' },\n    paddingRight: { defaultValue: 0.01, control: \'number\' },\n    paddingTop: { defaultValue: 0.01, control: \'number\' },\n    paddingBottom: { defaultValue: 0.01, control: \'number\' },\n  },\n} as Meta;\n\nexport const Control = function Control(props: Record<string, number>) {\n  const {\n    width,\n    height,\n    xMin,\n    xMax,\n    yMax,\n    yMin,\n    paddingLeft,\n    paddingRight,\n    paddingTop,\n    paddingBottom,\n  } = props;\n  return (\n    <Plot\n      width={width}\n      height={height}\n      margin={{ bottom: 50, left: 70, top: 50, right: 100 }}\n    >\n      <Heading\n        title="Electrical characterization"\n        subtitle="current vs voltage"\n      />\n      <LineSeries\n        data={{ x: [0, 1, 2, 3, 4, 5], y: [0, 1, 2, 3, 3, 3] }}\n        lineStyle={{ strokeWidth: 3 }}\n        label="Vg = 7V"\n        displayMarker={false}\n      />\n      <LineSeries\n        data={{ x: [1, 2, 3, 4, 5, 6], y: [2, 4, 6, 6, 6, 6] }}\n        displayMarker={true}\n        markerShape="circle"\n        label="Vg = 3V"\n      />\n      <XAxis\n        label="Drain voltage [V]"\n        showGridLines={true}\n        min={xMin}\n        max={xMax}\n        paddingLeft={paddingLeft}\n        paddingRight={paddingRight}\n      />\n      <YAxis\n        label="Drain current [mA]"\n        showGridLines={true}\n        labelSpace={40}\n        min={yMin}\n        max={yMax}\n        paddingTop={paddingTop}\n        paddingBottom={paddingBottom}\n      />\n      <Legend position="right" />\n    </Plot>\n  );\n};\n\n\nControl.parameters = { storySource: { source: "function Control(props: Record<string, number>) {\\n  const {\\n    width,\\n    height,\\n    xMin,\\n    xMax,\\n    yMax,\\n    yMin,\\n    paddingLeft,\\n    paddingRight,\\n    paddingTop,\\n    paddingBottom,\\n  } = props;\\n  return (\\n    <Plot\\n      width={width}\\n      height={height}\\n      margin={{ bottom: 50, left: 70, top: 50, right: 100 }}\\n    >\\n      <Heading\\n        title=\\"Electrical characterization\\"\\n        subtitle=\\"current vs voltage\\"\\n      />\\n      <LineSeries\\n        data={{ x: [0, 1, 2, 3, 4, 5], y: [0, 1, 2, 3, 3, 3] }}\\n        lineStyle={{ strokeWidth: 3 }}\\n        label=\\"Vg = 7V\\"\\n        displayMarker={false}\\n      />\\n      <LineSeries\\n        data={{ x: [1, 2, 3, 4, 5, 6], y: [2, 4, 6, 6, 6, 6] }}\\n        displayMarker={true}\\n        markerShape=\\"circle\\"\\n        label=\\"Vg = 3V\\"\\n      />\\n      <XAxis\\n        label=\\"Drain voltage [V]\\"\\n        showGridLines={true}\\n        min={xMin}\\n        max={xMax}\\n        paddingLeft={paddingLeft}\\n        paddingRight={paddingRight}\\n      />\\n      <YAxis\\n        label=\\"Drain current [mA]\\"\\n        showGridLines={true}\\n        labelSpace={40}\\n        min={yMin}\\n        max={yMax}\\n        paddingTop={paddingTop}\\n        paddingBottom={paddingBottom}\\n      />\\n      <Legend position=\\"right\\" />\\n    </Plot>\\n  );\\n}" }, ...Control.parameters };\n',locationsMap:{control:{startLoc:{col:23,line:30},endLoc:{col:1,line:85},startBody:{col:23,line:30},endBody:{col:1,line:85}}}}},title:"Plot/Axis boundaries",component:_src_index__WEBPACK_IMPORTED_MODULE_3__.d,argTypes:{width:{defaultValue:550,control:"number"},height:{defaultValue:500,control:"number"},xMin:{defaultValue:0,control:"number"},xMax:{defaultValue:6,control:"number"},yMin:{defaultValue:0,control:"number"},yMax:{defaultValue:6,control:"number"},paddingLeft:{defaultValue:.01,control:"number"},paddingRight:{defaultValue:.01,control:"number"},paddingTop:{defaultValue:.01,control:"number"},paddingBottom:{defaultValue:.01,control:"number"}}};var Control=function Control(props){var width=props.width,height=props.height,xMin=props.xMin,xMax=props.xMax,yMax=props.yMax,yMin=props.yMin,paddingLeft=props.paddingLeft,paddingRight=props.paddingRight,paddingTop=props.paddingTop,paddingBottom=props.paddingBottom;return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_src_index__WEBPACK_IMPORTED_MODULE_3__.d,{width:width,height:height,margin:{bottom:50,left:70,top:50,right:100},children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.a,{title:"Electrical characterization",subtitle:"current vs voltage"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.c,{data:{x:[0,1,2,3,4,5],y:[0,1,2,3,3,3]},lineStyle:{strokeWidth:3},label:"Vg = 7V",displayMarker:!1}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.c,{data:{x:[1,2,3,4,5,6],y:[2,4,6,6,6,6]},displayMarker:!0,markerShape:"circle",label:"Vg = 3V"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.e,{label:"Drain voltage [V]",showGridLines:!0,min:xMin,max:xMax,paddingLeft:paddingLeft,paddingRight:paddingRight}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.f,{label:"Drain current [mA]",showGridLines:!0,labelSpace:40,min:yMin,max:yMax,paddingTop:paddingTop,paddingBottom:paddingBottom}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_3__.b,{position:"right"})]})};Control.displayName="Control",Control.parameters=Object.assign({storySource:{source:'function Control(props: Record<string, number>) {\n  const {\n    width,\n    height,\n    xMin,\n    xMax,\n    yMax,\n    yMin,\n    paddingLeft,\n    paddingRight,\n    paddingTop,\n    paddingBottom,\n  } = props;\n  return (\n    <Plot\n      width={width}\n      height={height}\n      margin={{ bottom: 50, left: 70, top: 50, right: 100 }}\n    >\n      <Heading\n        title="Electrical characterization"\n        subtitle="current vs voltage"\n      />\n      <LineSeries\n        data={{ x: [0, 1, 2, 3, 4, 5], y: [0, 1, 2, 3, 3, 3] }}\n        lineStyle={{ strokeWidth: 3 }}\n        label="Vg = 7V"\n        displayMarker={false}\n      />\n      <LineSeries\n        data={{ x: [1, 2, 3, 4, 5, 6], y: [2, 4, 6, 6, 6, 6] }}\n        displayMarker={true}\n        markerShape="circle"\n        label="Vg = 3V"\n      />\n      <XAxis\n        label="Drain voltage [V]"\n        showGridLines={true}\n        min={xMin}\n        max={xMax}\n        paddingLeft={paddingLeft}\n        paddingRight={paddingRight}\n      />\n      <YAxis\n        label="Drain current [mA]"\n        showGridLines={true}\n        labelSpace={40}\n        min={yMin}\n        max={yMax}\n        paddingTop={paddingTop}\n        paddingBottom={paddingBottom}\n      />\n      <Legend position="right" />\n    </Plot>\n  );\n}'}},Control.parameters);try{Control.displayName="Control",Control.__docgenInfo={description:"",displayName:"Control",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/axis-boundaries.stories.tsx#Control"]={docgenInfo:Control.__docgenInfo,name:"Control",path:"stories/axis-boundaries.stories.tsx#Control"})}catch(__react_docgen_typescript_loader_error){}},1102:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"PCA",(function(){return PCA}));__webpack_require__(14),__webpack_require__(3);var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(5),ml_dataset_iris__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(212),ml_pca__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(479),_src_index__WEBPACK_IMPORTED_MODULE_6__=(__webpack_require__(0),__webpack_require__(29));function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}__webpack_exports__.default={parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import { Meta } from '@storybook/react';\\nimport { getClasses, getNumbers, getDistinctClasses } from 'ml-dataset-iris';\\nimport { PCA as MlPCA } from 'ml-pca';\\nimport React, { ReactElement } from 'react';\\n\\nimport { Plot, LineSeries, XAxis, YAxis } from '../../src/index';\\n\\nexport default {\\n  title: 'Examples/Iris dataset',\\n} as Meta;\\n\\nconst dataset = getNumbers();\\nconst numFeatures = dataset[0].length;\\nconst classes = getClasses();\\nconst distinctClasses = getDistinctClasses();\\n\\nexport function PCA() {\\n  const size = 800;\\n  const pca = new MlPCA(dataset);\\n  const explainedVariance = pca.getExplainedVariance();\\n  const predicted = pca.predict(dataset);\\n\\n  const children = [];\\n  for (let pcY = 0; pcY < numFeatures; pcY++) {\\n    for (let pcX = 0; pcX < numFeatures; pcX++) {\\n      if (pcY === pcX) {\\n        children.push(\\n          <div\\n            key={`${pcX}-${pcY}`}\\n            style={{\\n              display: 'flex',\\n              flexDirection: 'column',\\n              alignItems: 'center',\\n              justifyContent: 'center',\\n            }}\\n          >\\n            <div>PC {pcY + 1}</div>\\n            <div>{Math.round(explainedVariance[pcY] * 10000) / 100}</div>\\n          </div>,\\n        );\\n      } else {\\n        const series: ReactElement[] = [];\\n\\n        for (const klass of distinctClasses) {\\n          const indices = [];\\n          for (let i = 0; i < classes.length; i++) {\\n            if (classes[i] === klass) {\\n              indices.push(i);\\n            }\\n          }\\n\\n          const predictedData = predicted.selection(indices, [pcX, pcY]);\\n          const data = {\\n            x: predictedData.getColumn(0),\\n            y: predictedData.getColumn(1),\\n          };\\n\\n          series.push(\\n            <LineSeries\\n              key={klass}\\n              data={data}\\n              label={klass}\\n              lineStyle={{ strokeWidth: 0 }}\\n              markerSize={2}\\n              displayMarker\\n            />,\\n          );\\n        }\\n\\n        children.push(\\n          <Plot\\n            key={`${pcX}-${pcY}`}\\n            width={size / numFeatures}\\n            height={size / numFeatures}\\n            margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\\n          >\\n            <XAxis paddingLeft={0.05} paddingRight={0.05} display={false} />\\n            <YAxis paddingTop={0.05} paddingBottom={0.05} display={false} />\\n            {series}\\n          </Plot>,\\n        );\\n      }\\n    }\\n  }\\n\\n  return (\\n    <div\\n      style={{\\n        display: 'grid',\\n        gridTemplateColumns: 'repeat(4, minmax(0, 1fr))',\\n        gridTemplateRows: 'repeat(4, minmax(0, 1fr))',\\n        fontFamily: 'Arial, Helvetica, sans-serif',\\n        width: 800,\\n        height: 800,\\n      }}\\n    >\\n      {children}\\n    </div>\\n  );\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"PCA\":{\"startLoc\":{\"col\":7,\"line\":17},\"endLoc\":{\"col\":1,\"line\":100},\"startBody\":{\"col\":7,\"line\":17},\"endBody\":{\"col\":1,\"line\":100}}};\nimport { Meta } from '@storybook/react';\nimport { getClasses, getNumbers, getDistinctClasses } from 'ml-dataset-iris';\nimport { PCA as MlPCA } from 'ml-pca';\nimport React, { ReactElement } from 'react';\n\nimport { Plot, LineSeries, XAxis, YAxis } from '../../src/index';\n\nexport default {\n  title: 'Examples/Iris dataset',\n} as Meta;\n\nconst dataset = getNumbers();\nconst numFeatures = dataset[0].length;\nconst classes = getClasses();\nconst distinctClasses = getDistinctClasses();\n\nexport const PCA = function PCA() {\n  const size = 800;\n  const pca = new MlPCA(dataset);\n  const explainedVariance = pca.getExplainedVariance();\n  const predicted = pca.predict(dataset);\n\n  const children = [];\n  for (let pcY = 0; pcY < numFeatures; pcY++) {\n    for (let pcX = 0; pcX < numFeatures; pcX++) {\n      if (pcY === pcX) {\n        children.push(\n          <div\n            key={`${pcX}-${pcY}`}\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <div>PC {pcY + 1}</div>\n            <div>{Math.round(explainedVariance[pcY] * 10000) / 100}</div>\n          </div>,\n        );\n      } else {\n        const series: ReactElement[] = [];\n\n        for (const klass of distinctClasses) {\n          const indices = [];\n          for (let i = 0; i < classes.length; i++) {\n            if (classes[i] === klass) {\n              indices.push(i);\n            }\n          }\n\n          const predictedData = predicted.selection(indices, [pcX, pcY]);\n          const data = {\n            x: predictedData.getColumn(0),\n            y: predictedData.getColumn(1),\n          };\n\n          series.push(\n            <LineSeries\n              key={klass}\n              data={data}\n              label={klass}\n              lineStyle={{ strokeWidth: 0 }}\n              markerSize={2}\n              displayMarker\n            />,\n          );\n        }\n\n        children.push(\n          <Plot\n            key={`${pcX}-${pcY}`}\n            width={size / numFeatures}\n            height={size / numFeatures}\n            margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\n          >\n            <XAxis paddingLeft={0.05} paddingRight={0.05} display={false} />\n            <YAxis paddingTop={0.05} paddingBottom={0.05} display={false} />\n            {series}\n          </Plot>,\n        );\n      }\n    }\n  }\n\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridTemplateColumns: 'repeat(4, minmax(0, 1fr))',\n        gridTemplateRows: 'repeat(4, minmax(0, 1fr))',\n        fontFamily: 'Arial, Helvetica, sans-serif',\n        width: 800,\n        height: 800,\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\n\nPCA.parameters = { storySource: { source: \"function PCA() {\\n  const size = 800;\\n  const pca = new MlPCA(dataset);\\n  const explainedVariance = pca.getExplainedVariance();\\n  const predicted = pca.predict(dataset);\\n\\n  const children = [];\\n  for (let pcY = 0; pcY < numFeatures; pcY++) {\\n    for (let pcX = 0; pcX < numFeatures; pcX++) {\\n      if (pcY === pcX) {\\n        children.push(\\n          <div\\n            key={`${pcX}-${pcY}`}\\n            style={{\\n              display: 'flex',\\n              flexDirection: 'column',\\n              alignItems: 'center',\\n              justifyContent: 'center',\\n            }}\\n          >\\n            <div>PC {pcY + 1}</div>\\n            <div>{Math.round(explainedVariance[pcY] * 10000) / 100}</div>\\n          </div>,\\n        );\\n      } else {\\n        const series: ReactElement[] = [];\\n\\n        for (const klass of distinctClasses) {\\n          const indices = [];\\n          for (let i = 0; i < classes.length; i++) {\\n            if (classes[i] === klass) {\\n              indices.push(i);\\n            }\\n          }\\n\\n          const predictedData = predicted.selection(indices, [pcX, pcY]);\\n          const data = {\\n            x: predictedData.getColumn(0),\\n            y: predictedData.getColumn(1),\\n          };\\n\\n          series.push(\\n            <LineSeries\\n              key={klass}\\n              data={data}\\n              label={klass}\\n              lineStyle={{ strokeWidth: 0 }}\\n              markerSize={2}\\n              displayMarker\\n            />,\\n          );\\n        }\\n\\n        children.push(\\n          <Plot\\n            key={`${pcX}-${pcY}`}\\n            width={size / numFeatures}\\n            height={size / numFeatures}\\n            margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\\n          >\\n            <XAxis paddingLeft={0.05} paddingRight={0.05} display={false} />\\n            <YAxis paddingTop={0.05} paddingBottom={0.05} display={false} />\\n            {series}\\n          </Plot>,\\n        );\\n      }\\n    }\\n  }\\n\\n  return (\\n    <div\\n      style={{\\n        display: 'grid',\\n        gridTemplateColumns: 'repeat(4, minmax(0, 1fr))',\\n        gridTemplateRows: 'repeat(4, minmax(0, 1fr))',\\n        fontFamily: 'Arial, Helvetica, sans-serif',\\n        width: 800,\\n        height: 800,\\n      }}\\n    >\\n      {children}\\n    </div>\\n  );\\n}\" }, ...PCA.parameters };\n",locationsMap:{pca:{startLoc:{col:19,line:24},endLoc:{col:1,line:107},startBody:{col:19,line:24},endBody:{col:1,line:107}}}}},title:"Examples/Iris dataset"};var dataset=Object(ml_dataset_iris__WEBPACK_IMPORTED_MODULE_3__.getNumbers)(),numFeatures=dataset[0].length,classes=Object(ml_dataset_iris__WEBPACK_IMPORTED_MODULE_3__.getClasses)(),distinctClasses=Object(ml_dataset_iris__WEBPACK_IMPORTED_MODULE_3__.getDistinctClasses)(),PCA=function PCA(){for(var pca=new ml_pca__WEBPACK_IMPORTED_MODULE_4__.a(dataset),explainedVariance=pca.getExplainedVariance(),predicted=pca.predict(dataset),children=[],pcY=0;pcY<numFeatures;pcY++)for(var pcX=0;pcX<numFeatures;pcX++)if(pcY===pcX)children.push(Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div",{style:{display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"center"},children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div",{children:["PC ",pcY+1]}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{children:Math.round(1e4*explainedVariance[pcY])/100})]},"".concat(pcX,"-").concat(pcY)));else{var _step,series=[],_iterator=_createForOfIteratorHelper(distinctClasses);try{for(_iterator.s();!(_step=_iterator.n()).done;){for(var klass=_step.value,indices=[],i=0;i<classes.length;i++)classes[i]===klass&&indices.push(i);var predictedData=predicted.selection(indices,[pcX,pcY]),data={x:predictedData.getColumn(0),y:predictedData.getColumn(1)};series.push(Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_6__.c,{data:data,label:klass,lineStyle:{strokeWidth:0},markerSize:2,displayMarker:!0},klass))}}catch(err){_iterator.e(err)}finally{_iterator.f()}children.push(Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_src_index__WEBPACK_IMPORTED_MODULE_6__.d,{width:800/numFeatures,height:800/numFeatures,margin:{top:0,right:0,bottom:0,left:0},children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_6__.e,{paddingLeft:.05,paddingRight:.05,display:!1}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_6__.f,{paddingTop:.05,paddingBottom:.05,display:!1}),series]},"".concat(pcX,"-").concat(pcY)))}return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{style:{display:"grid",gridTemplateColumns:"repeat(4, minmax(0, 1fr))",gridTemplateRows:"repeat(4, minmax(0, 1fr))",fontFamily:"Arial, Helvetica, sans-serif",width:800,height:800},children:children})};PCA.displayName="PCA",PCA.parameters=Object.assign({storySource:{source:"function PCA() {\n  const size = 800;\n  const pca = new MlPCA(dataset);\n  const explainedVariance = pca.getExplainedVariance();\n  const predicted = pca.predict(dataset);\n\n  const children = [];\n  for (let pcY = 0; pcY < numFeatures; pcY++) {\n    for (let pcX = 0; pcX < numFeatures; pcX++) {\n      if (pcY === pcX) {\n        children.push(\n          <div\n            key={`${pcX}-${pcY}`}\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <div>PC {pcY + 1}</div>\n            <div>{Math.round(explainedVariance[pcY] * 10000) / 100}</div>\n          </div>,\n        );\n      } else {\n        const series: ReactElement[] = [];\n\n        for (const klass of distinctClasses) {\n          const indices = [];\n          for (let i = 0; i < classes.length; i++) {\n            if (classes[i] === klass) {\n              indices.push(i);\n            }\n          }\n\n          const predictedData = predicted.selection(indices, [pcX, pcY]);\n          const data = {\n            x: predictedData.getColumn(0),\n            y: predictedData.getColumn(1),\n          };\n\n          series.push(\n            <LineSeries\n              key={klass}\n              data={data}\n              label={klass}\n              lineStyle={{ strokeWidth: 0 }}\n              markerSize={2}\n              displayMarker\n            />,\n          );\n        }\n\n        children.push(\n          <Plot\n            key={`${pcX}-${pcY}`}\n            width={size / numFeatures}\n            height={size / numFeatures}\n            margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\n          >\n            <XAxis paddingLeft={0.05} paddingRight={0.05} display={false} />\n            <YAxis paddingTop={0.05} paddingBottom={0.05} display={false} />\n            {series}\n          </Plot>,\n        );\n      }\n    }\n  }\n\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridTemplateColumns: 'repeat(4, minmax(0, 1fr))',\n        gridTemplateRows: 'repeat(4, minmax(0, 1fr))',\n        fontFamily: 'Arial, Helvetica, sans-serif',\n        width: 800,\n        height: 800,\n      }}\n    >\n      {children}\n    </div>\n  );\n}"}},PCA.parameters)},1106:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Control",(function(){return Control})),__webpack_require__.d(__webpack_exports__,"ScientificNotation",(function(){return ScientificNotation}));__webpack_require__(18),__webpack_require__(3);var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(5),_src_index__WEBPACK_IMPORTED_MODULE_4__=(__webpack_require__(0),__webpack_require__(29));__webpack_exports__.default={parameters:{storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import { Meta } from \'@storybook/react\';\\nimport React from \'react\';\\n\\nimport { Plot, Heading, Legend, LineSeries, XAxis, YAxis } from \'../src/index\';\\n\\nexport default {\\n  title: \'Plot/General options\',\\n  component: Plot,\\n  argTypes: {\\n    width: {\\n      defaultValue: 550,\\n      control: \'number\',\\n    },\\n    height: {\\n      defaultValue: 500,\\n      control: \'number\',\\n    },\\n    displayPlot: {\\n      defaultValue: true,\\n      control: \'boolean\',\\n    },\\n    showGridLines: {\\n      defaultValue: true,\\n      control: \'boolean\',\\n    },\\n    headingPosition: {\\n      defaultValue: \'top\',\\n      control: { type: \'select\', options: [\'top\', \'bottom\'] },\\n    },\\n    legendPosition: {\\n      defaultValue: \'right\',\\n      control: { type: \'select\', options: [\'left\', \'right\'] },\\n    },\\n    showAxis: {\\n      defaultValue: true,\\n      control: \'boolean\',\\n    },\\n    xFlip: {\\n      defaultValue: false,\\n      control: \'boolean\',\\n    },\\n    yFlip: {\\n      defaultValue: false,\\n      control: \'boolean\',\\n    },\\n  },\\n} as Meta;\\n\\nexport function Control(props) {\\n  const {\\n    displayPlot,\\n    showGridLines,\\n    width,\\n    height,\\n    headingPosition,\\n    legendPosition,\\n    showAxis,\\n    xFlip,\\n    yFlip,\\n  } = props;\\n\\n  const bottom = headingPosition === \'top\' ? 50 : 100;\\n  const left = legendPosition === \'right\' ? 70 : 150;\\n  const top = headingPosition === \'top\' ? 50 : 10;\\n  const right = legendPosition === \'right\' ? 100 : 10;\\n\\n  return (\\n    <Plot width={width} height={height} margin={{ bottom, left, top, right }}>\\n      <Heading\\n        title=\\"Electrical characterization\\"\\n        subtitle=\\"current vs voltage\\"\\n        position={headingPosition}\\n      />\\n      {displayPlot && (\\n        <LineSeries\\n          data={{ x: [0, 1, 2, 3, 4, 5], y: [0, 1, 2, 3, 3, 3] }}\\n          lineStyle={{ strokeWidth: 3 }}\\n          label=\\"Vg = 7V\\"\\n          displayMarker={false}\\n        />\\n      )}\\n      <LineSeries\\n        data={{ x: [1, 2, 3, 4, 5, 6], y: [2, 4, 6, 6, 6, 6] }}\\n        displayMarker={true}\\n        markerShape=\\"circle\\"\\n        label=\\"Vg = 3V\\"\\n      />\\n      <XAxis\\n        label=\\"Drain voltage [V]\\"\\n        showGridLines={showGridLines}\\n        display={showAxis}\\n        flip={xFlip}\\n      />\\n      <YAxis\\n        label=\\"Drain current [mA]\\"\\n        showGridLines={showGridLines}\\n        labelSpace={40}\\n        display={showAxis}\\n        flip={yFlip}\\n      />\\n      <Legend position={legendPosition} />\\n    </Plot>\\n  );\\n}\\n\\nexport function ScientificNotation() {\\n  const factor = 1000;\\n  return (\\n    <Plot\\n      width={550}\\n      height={500}\\n      margin={{ bottom: 50, left: 90, top: 50, right: 100 }}\\n    >\\n      <Heading\\n        title=\\"Electrical characterization\\"\\n        subtitle=\\"current vs voltage\\"\\n      />\\n      <LineSeries\\n        data={{\\n          x: [0, 1, 2, 3, 4, 5].map((val) => val / factor),\\n          y: [0, 1, 2, 3, 3, 3].map((val) => val * factor),\\n        }}\\n        lineStyle={{ strokeWidth: 3 }}\\n        label=\\"Vg = 7V\\"\\n        displayMarker={false}\\n      />\\n      <LineSeries\\n        data={{\\n          x: [1, 2, 3, 4, 5, 6].map((val) => val / factor),\\n          y: [2, 4, 6, 6, 6, 6].map((val) => val * factor),\\n        }}\\n        displayMarker={true}\\n        markerShape=\\"circle\\"\\n        label=\\"Vg = 3V\\"\\n      />\\n      <XAxis\\n        label=\\"Drain voltage [V]\\"\\n        showGridLines={true}\\n        max={6.1 / factor}\\n        tickStyle={{ fontSize: \'0.8rem\' }}\\n      />\\n      <YAxis\\n        label=\\"Drain current [mA]\\"\\n        showGridLines={true}\\n        labelSpace={50}\\n        max={6.1 * factor}\\n        tickStyle={{ fontSize: \'0.8rem\' }}\\n      />\\n      <Legend position=\\"right\\" />\\n    </Plot>\\n  );\\n}\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"Control":{"startLoc":{"col":7,"line":49},"endLoc":{"col":1,"line":104},"startBody":{"col":7,"line":49},"endBody":{"col":1,"line":104}},"ScientificNotation":{"startLoc":{"col":7,"line":106},"endLoc":{"col":1,"line":152},"startBody":{"col":7,"line":106},"endBody":{"col":1,"line":152}}};\nimport { Meta } from \'@storybook/react\';\nimport React from \'react\';\n\nimport { Plot, Heading, Legend, LineSeries, XAxis, YAxis } from \'../src/index\';\n\nexport default {\n  title: \'Plot/General options\',\n  component: Plot,\n  argTypes: {\n    width: {\n      defaultValue: 550,\n      control: \'number\',\n    },\n    height: {\n      defaultValue: 500,\n      control: \'number\',\n    },\n    displayPlot: {\n      defaultValue: true,\n      control: \'boolean\',\n    },\n    showGridLines: {\n      defaultValue: true,\n      control: \'boolean\',\n    },\n    headingPosition: {\n      defaultValue: \'top\',\n      control: { type: \'select\', options: [\'top\', \'bottom\'] },\n    },\n    legendPosition: {\n      defaultValue: \'right\',\n      control: { type: \'select\', options: [\'left\', \'right\'] },\n    },\n    showAxis: {\n      defaultValue: true,\n      control: \'boolean\',\n    },\n    xFlip: {\n      defaultValue: false,\n      control: \'boolean\',\n    },\n    yFlip: {\n      defaultValue: false,\n      control: \'boolean\',\n    },\n  },\n} as Meta;\n\nexport const Control = function Control(props) {\n  const {\n    displayPlot,\n    showGridLines,\n    width,\n    height,\n    headingPosition,\n    legendPosition,\n    showAxis,\n    xFlip,\n    yFlip,\n  } = props;\n\n  const bottom = headingPosition === \'top\' ? 50 : 100;\n  const left = legendPosition === \'right\' ? 70 : 150;\n  const top = headingPosition === \'top\' ? 50 : 10;\n  const right = legendPosition === \'right\' ? 100 : 10;\n\n  return (\n    <Plot width={width} height={height} margin={{ bottom, left, top, right }}>\n      <Heading\n        title="Electrical characterization"\n        subtitle="current vs voltage"\n        position={headingPosition}\n      />\n      {displayPlot && (\n        <LineSeries\n          data={{ x: [0, 1, 2, 3, 4, 5], y: [0, 1, 2, 3, 3, 3] }}\n          lineStyle={{ strokeWidth: 3 }}\n          label="Vg = 7V"\n          displayMarker={false}\n        />\n      )}\n      <LineSeries\n        data={{ x: [1, 2, 3, 4, 5, 6], y: [2, 4, 6, 6, 6, 6] }}\n        displayMarker={true}\n        markerShape="circle"\n        label="Vg = 3V"\n      />\n      <XAxis\n        label="Drain voltage [V]"\n        showGridLines={showGridLines}\n        display={showAxis}\n        flip={xFlip}\n      />\n      <YAxis\n        label="Drain current [mA]"\n        showGridLines={showGridLines}\n        labelSpace={40}\n        display={showAxis}\n        flip={yFlip}\n      />\n      <Legend position={legendPosition} />\n    </Plot>\n  );\n};\n\nexport const ScientificNotation = function ScientificNotation() {\n  const factor = 1000;\n  return (\n    <Plot\n      width={550}\n      height={500}\n      margin={{ bottom: 50, left: 90, top: 50, right: 100 }}\n    >\n      <Heading\n        title="Electrical characterization"\n        subtitle="current vs voltage"\n      />\n      <LineSeries\n        data={{\n          x: [0, 1, 2, 3, 4, 5].map((val) => val / factor),\n          y: [0, 1, 2, 3, 3, 3].map((val) => val * factor),\n        }}\n        lineStyle={{ strokeWidth: 3 }}\n        label="Vg = 7V"\n        displayMarker={false}\n      />\n      <LineSeries\n        data={{\n          x: [1, 2, 3, 4, 5, 6].map((val) => val / factor),\n          y: [2, 4, 6, 6, 6, 6].map((val) => val * factor),\n        }}\n        displayMarker={true}\n        markerShape="circle"\n        label="Vg = 3V"\n      />\n      <XAxis\n        label="Drain voltage [V]"\n        showGridLines={true}\n        max={6.1 / factor}\n        tickStyle={{ fontSize: \'0.8rem\' }}\n      />\n      <YAxis\n        label="Drain current [mA]"\n        showGridLines={true}\n        labelSpace={50}\n        max={6.1 * factor}\n        tickStyle={{ fontSize: \'0.8rem\' }}\n      />\n      <Legend position="right" />\n    </Plot>\n  );\n};\n\n\nControl.parameters = { storySource: { source: "function Control(props) {\\n  const {\\n    displayPlot,\\n    showGridLines,\\n    width,\\n    height,\\n    headingPosition,\\n    legendPosition,\\n    showAxis,\\n    xFlip,\\n    yFlip,\\n  } = props;\\n\\n  const bottom = headingPosition === \'top\' ? 50 : 100;\\n  const left = legendPosition === \'right\' ? 70 : 150;\\n  const top = headingPosition === \'top\' ? 50 : 10;\\n  const right = legendPosition === \'right\' ? 100 : 10;\\n\\n  return (\\n    <Plot width={width} height={height} margin={{ bottom, left, top, right }}>\\n      <Heading\\n        title=\\"Electrical characterization\\"\\n        subtitle=\\"current vs voltage\\"\\n        position={headingPosition}\\n      />\\n      {displayPlot && (\\n        <LineSeries\\n          data={{ x: [0, 1, 2, 3, 4, 5], y: [0, 1, 2, 3, 3, 3] }}\\n          lineStyle={{ strokeWidth: 3 }}\\n          label=\\"Vg = 7V\\"\\n          displayMarker={false}\\n        />\\n      )}\\n      <LineSeries\\n        data={{ x: [1, 2, 3, 4, 5, 6], y: [2, 4, 6, 6, 6, 6] }}\\n        displayMarker={true}\\n        markerShape=\\"circle\\"\\n        label=\\"Vg = 3V\\"\\n      />\\n      <XAxis\\n        label=\\"Drain voltage [V]\\"\\n        showGridLines={showGridLines}\\n        display={showAxis}\\n        flip={xFlip}\\n      />\\n      <YAxis\\n        label=\\"Drain current [mA]\\"\\n        showGridLines={showGridLines}\\n        labelSpace={40}\\n        display={showAxis}\\n        flip={yFlip}\\n      />\\n      <Legend position={legendPosition} />\\n    </Plot>\\n  );\\n}" }, ...Control.parameters };\nScientificNotation.parameters = { storySource: { source: "function ScientificNotation() {\\n  const factor = 1000;\\n  return (\\n    <Plot\\n      width={550}\\n      height={500}\\n      margin={{ bottom: 50, left: 90, top: 50, right: 100 }}\\n    >\\n      <Heading\\n        title=\\"Electrical characterization\\"\\n        subtitle=\\"current vs voltage\\"\\n      />\\n      <LineSeries\\n        data={{\\n          x: [0, 1, 2, 3, 4, 5].map((val) => val / factor),\\n          y: [0, 1, 2, 3, 3, 3].map((val) => val * factor),\\n        }}\\n        lineStyle={{ strokeWidth: 3 }}\\n        label=\\"Vg = 7V\\"\\n        displayMarker={false}\\n      />\\n      <LineSeries\\n        data={{\\n          x: [1, 2, 3, 4, 5, 6].map((val) => val / factor),\\n          y: [2, 4, 6, 6, 6, 6].map((val) => val * factor),\\n        }}\\n        displayMarker={true}\\n        markerShape=\\"circle\\"\\n        label=\\"Vg = 3V\\"\\n      />\\n      <XAxis\\n        label=\\"Drain voltage [V]\\"\\n        showGridLines={true}\\n        max={6.1 / factor}\\n        tickStyle={{ fontSize: \'0.8rem\' }}\\n      />\\n      <YAxis\\n        label=\\"Drain current [mA]\\"\\n        showGridLines={true}\\n        labelSpace={50}\\n        max={6.1 * factor}\\n        tickStyle={{ fontSize: \'0.8rem\' }}\\n      />\\n      <Legend position=\\"right\\" />\\n    </Plot>\\n  );\\n}" }, ...ScientificNotation.parameters };\n',locationsMap:{control:{startLoc:{col:23,line:56},endLoc:{col:1,line:111},startBody:{col:23,line:56},endBody:{col:1,line:111}},"scientific-notation":{startLoc:{col:34,line:113},endLoc:{col:1,line:159},startBody:{col:34,line:113},endBody:{col:1,line:159}}}}},title:"Plot/General options",component:_src_index__WEBPACK_IMPORTED_MODULE_4__.d,argTypes:{width:{defaultValue:550,control:"number"},height:{defaultValue:500,control:"number"},displayPlot:{defaultValue:!0,control:"boolean"},showGridLines:{defaultValue:!0,control:"boolean"},headingPosition:{defaultValue:"top",control:{type:"select",options:["top","bottom"]}},legendPosition:{defaultValue:"right",control:{type:"select",options:["left","right"]}},showAxis:{defaultValue:!0,control:"boolean"},xFlip:{defaultValue:!1,control:"boolean"},yFlip:{defaultValue:!1,control:"boolean"}}};var Control=function Control(props){var displayPlot=props.displayPlot,showGridLines=props.showGridLines,width=props.width,height=props.height,headingPosition=props.headingPosition,legendPosition=props.legendPosition,showAxis=props.showAxis,xFlip=props.xFlip,yFlip=props.yFlip,bottom="top"===headingPosition?50:100,left="right"===legendPosition?70:150,top="top"===headingPosition?50:10,right="right"===legendPosition?100:10;return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_src_index__WEBPACK_IMPORTED_MODULE_4__.d,{width:width,height:height,margin:{bottom:bottom,left:left,top:top,right:right},children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_4__.a,{title:"Electrical characterization",subtitle:"current vs voltage",position:headingPosition}),displayPlot&&Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_4__.c,{data:{x:[0,1,2,3,4,5],y:[0,1,2,3,3,3]},lineStyle:{strokeWidth:3},label:"Vg = 7V",displayMarker:!1}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_4__.c,{data:{x:[1,2,3,4,5,6],y:[2,4,6,6,6,6]},displayMarker:!0,markerShape:"circle",label:"Vg = 3V"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_4__.e,{label:"Drain voltage [V]",showGridLines:showGridLines,display:showAxis,flip:xFlip}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_4__.f,{label:"Drain current [mA]",showGridLines:showGridLines,labelSpace:40,display:showAxis,flip:yFlip}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_4__.b,{position:legendPosition})]})};Control.displayName="Control";var ScientificNotation=function ScientificNotation(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_src_index__WEBPACK_IMPORTED_MODULE_4__.d,{width:550,height:500,margin:{bottom:50,left:90,top:50,right:100},children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_4__.a,{title:"Electrical characterization",subtitle:"current vs voltage"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_4__.c,{data:{x:[0,1,2,3,4,5].map((function(val){return val/1e3})),y:[0,1,2,3,3,3].map((function(val){return 1e3*val}))},lineStyle:{strokeWidth:3},label:"Vg = 7V",displayMarker:!1}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_4__.c,{data:{x:[1,2,3,4,5,6].map((function(val){return val/1e3})),y:[2,4,6,6,6,6].map((function(val){return 1e3*val}))},displayMarker:!0,markerShape:"circle",label:"Vg = 3V"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_4__.e,{label:"Drain voltage [V]",showGridLines:!0,max:6.1/1e3,tickStyle:{fontSize:"0.8rem"}}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_4__.f,{label:"Drain current [mA]",showGridLines:!0,labelSpace:50,max:6100,tickStyle:{fontSize:"0.8rem"}}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_src_index__WEBPACK_IMPORTED_MODULE_4__.b,{position:"right"})]})};ScientificNotation.displayName="ScientificNotation",Control.parameters=Object.assign({storySource:{source:'function Control(props) {\n  const {\n    displayPlot,\n    showGridLines,\n    width,\n    height,\n    headingPosition,\n    legendPosition,\n    showAxis,\n    xFlip,\n    yFlip,\n  } = props;\n\n  const bottom = headingPosition === \'top\' ? 50 : 100;\n  const left = legendPosition === \'right\' ? 70 : 150;\n  const top = headingPosition === \'top\' ? 50 : 10;\n  const right = legendPosition === \'right\' ? 100 : 10;\n\n  return (\n    <Plot width={width} height={height} margin={{ bottom, left, top, right }}>\n      <Heading\n        title="Electrical characterization"\n        subtitle="current vs voltage"\n        position={headingPosition}\n      />\n      {displayPlot && (\n        <LineSeries\n          data={{ x: [0, 1, 2, 3, 4, 5], y: [0, 1, 2, 3, 3, 3] }}\n          lineStyle={{ strokeWidth: 3 }}\n          label="Vg = 7V"\n          displayMarker={false}\n        />\n      )}\n      <LineSeries\n        data={{ x: [1, 2, 3, 4, 5, 6], y: [2, 4, 6, 6, 6, 6] }}\n        displayMarker={true}\n        markerShape="circle"\n        label="Vg = 3V"\n      />\n      <XAxis\n        label="Drain voltage [V]"\n        showGridLines={showGridLines}\n        display={showAxis}\n        flip={xFlip}\n      />\n      <YAxis\n        label="Drain current [mA]"\n        showGridLines={showGridLines}\n        labelSpace={40}\n        display={showAxis}\n        flip={yFlip}\n      />\n      <Legend position={legendPosition} />\n    </Plot>\n  );\n}'}},Control.parameters),ScientificNotation.parameters=Object.assign({storySource:{source:'function ScientificNotation() {\n  const factor = 1000;\n  return (\n    <Plot\n      width={550}\n      height={500}\n      margin={{ bottom: 50, left: 90, top: 50, right: 100 }}\n    >\n      <Heading\n        title="Electrical characterization"\n        subtitle="current vs voltage"\n      />\n      <LineSeries\n        data={{\n          x: [0, 1, 2, 3, 4, 5].map((val) => val / factor),\n          y: [0, 1, 2, 3, 3, 3].map((val) => val * factor),\n        }}\n        lineStyle={{ strokeWidth: 3 }}\n        label="Vg = 7V"\n        displayMarker={false}\n      />\n      <LineSeries\n        data={{\n          x: [1, 2, 3, 4, 5, 6].map((val) => val / factor),\n          y: [2, 4, 6, 6, 6, 6].map((val) => val * factor),\n        }}\n        displayMarker={true}\n        markerShape="circle"\n        label="Vg = 3V"\n      />\n      <XAxis\n        label="Drain voltage [V]"\n        showGridLines={true}\n        max={6.1 / factor}\n        tickStyle={{ fontSize: \'0.8rem\' }}\n      />\n      <YAxis\n        label="Drain current [mA]"\n        showGridLines={true}\n        labelSpace={50}\n        max={6.1 * factor}\n        tickStyle={{ fontSize: \'0.8rem\' }}\n      />\n      <Legend position="right" />\n    </Plot>\n  );\n}'}},ScientificNotation.parameters);try{Control.displayName="Control",Control.__docgenInfo={description:"",displayName:"Control",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/plot.stories.tsx#Control"]={docgenInfo:Control.__docgenInfo,name:"Control",path:"stories/plot.stories.tsx#Control"})}catch(__react_docgen_typescript_loader_error){}},29:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"d",(function(){return Plot})),__webpack_require__.d(__webpack_exports__,"a",(function(){return Heading})),__webpack_require__.d(__webpack_exports__,"b",(function(){return Legend})),__webpack_require__.d(__webpack_exports__,"c",(function(){return LineSeries})),__webpack_require__.d(__webpack_exports__,"e",(function(){return components_XAxis})),__webpack_require__.d(__webpack_exports__,"f",(function(){return components_YAxis}));__webpack_require__(14),__webpack_require__(48),__webpack_require__(63),__webpack_require__(18),__webpack_require__(3),__webpack_require__(74);var jsx_runtime=__webpack_require__(5),src_min=__webpack_require__(1125),src_max=__webpack_require__(1126),linear=__webpack_require__(1129),ordinal=__webpack_require__(1127),Set1=__webpack_require__(1132),react=__webpack_require__(0),react_default=__webpack_require__.n(react),PlotContext=Object(react.createContext)({xScientific:!1,yScientific:!1}),DispatchContext=Object(react.createContext)({dispatch:null});function usePlotContext(){var context=Object(react.useContext)(PlotContext);if(!context)throw new Error("Plot compound component outside Plot context");return context}function useDispatchContext(){var context=Object(react.useContext)(DispatchContext);if(!context)throw new Error("Plot compound component outside Dispatch context");return context}__webpack_require__(24),__webpack_require__(47);function Heading(_ref){var title=_ref.title,titleStyle=_ref.titleStyle,titleClass=_ref.titleClass,subtitle=_ref.subtitle,subtitleStyle=_ref.subtitleStyle,subtitleClass=_ref.subtitleClass,_ref$position=_ref.position,position=void 0===_ref$position?"top":_ref$position,_usePlotContext=usePlotContext(),width=_usePlotContext.width,y=function yTranslation(position,height){switch(position){case"top":return 20;case"bottom":return height+64;default:throw new Error("Unknown ".concat(JSON.stringify(position)," position"))}}(position,_usePlotContext.height-_usePlotContext.bottom);return Object(jsx_runtime.jsxs)("g",{transform:"translate(".concat(width/2,", ").concat(y,")"),children:[Object(jsx_runtime.jsx)("text",{style:Object.assign({},{textAnchor:"middle",fontSize:"16px",fontWeight:"bold"},titleStyle),className:titleClass,children:title}),subtitle&&Object(jsx_runtime.jsx)("text",{transform:"translate(0, 20)",style:Object.assign({},{textAnchor:"middle",fontSize:"14px",color:"gray"},subtitleStyle),className:subtitleClass,children:subtitle})]})}Heading.displayName="Heading";try{Heading.displayName="Heading",Heading.__docgenInfo={description:"",displayName:"Heading",props:{title:{defaultValue:null,description:"",name:"title",required:!0,type:{name:"string"}},titleStyle:{defaultValue:null,description:"",name:"titleStyle",required:!1,type:{name:"CSSProperties"}},titleClass:{defaultValue:null,description:"",name:"titleClass",required:!1,type:{name:"string"}},subtitle:{defaultValue:null,description:"",name:"subtitle",required:!1,type:{name:"string"}},subtitleStyle:{defaultValue:null,description:"",name:"subtitleStyle",required:!1,type:{name:"CSSProperties"}},subtitleClass:{defaultValue:null,description:"",name:"subtitleClass",required:!1,type:{name:"string"}},position:{defaultValue:{value:"top"},description:"",name:"position",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Heading.tsx#Heading"]={docgenInfo:Heading.__docgenInfo,name:"Heading",path:"src/components/Heading.tsx#Heading"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__(15);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function Legend(_ref){var position=_ref.position,_usePlotContext=usePlotContext(),labels=_usePlotContext.labels,right=_usePlotContext.right,left=_usePlotContext.left,height=_usePlotContext.height,width=_usePlotContext.width,colorScaler=_usePlotContext.colorScaler,_translation2=_slicedToArray(function translation(position,width,height,right,left){switch(position){case"right":return[width-right+16,height/2];case"left":return[left-130,height/2];default:throw new Error("Position ".concat(JSON.stringify(position)," unknown"))}}(position,width,height,right,left),2),x=_translation2[0],y=_translation2[1];return Object(jsx_runtime.jsxs)("g",{transform:"translate(".concat(x,", ").concat(y,")"),children:[null==labels?void 0:labels.map((function(text,index){return Object(jsx_runtime.jsx)("circle",{cx:"0",cy:"".concat(index+1,"em"),r:"0.25em",fill:colorScaler(text)},"circle-".concat(text,"-").concat(index))})),null==labels?void 0:labels.map((function(text,index){return Object(jsx_runtime.jsx)("text",{x:"0.75em",y:"".concat(index+1.25,"em"),children:text},"text-".concat(text,"-").concat(index))}))]})}Legend.displayName="Legend";try{Legend.displayName="Legend",Legend.__docgenInfo={description:"",displayName:"Legend",props:{position:{defaultValue:null,description:"",name:"position",required:!1,type:{name:"enum",value:[{value:'"right"'},{value:'"left"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Legend.tsx#Legend"]={docgenInfo:Legend.__docgenInfo,name:"Legend",path:"src/components/Legend.tsx#Legend"})}catch(__react_docgen_typescript_loader_error){}var extent=__webpack_require__(1124),line=__webpack_require__(1130);__webpack_require__(1100);function Circle(_ref){var x=_ref.x,y=_ref.y,fill=_ref.fill,size=_ref.size;return Object(jsx_runtime.jsx)("circle",{cx:x,cy:y,r:size,fill:fill})}function Square(_ref2){var x=_ref2.x,y=_ref2.y,fill=_ref2.fill,size=_ref2.size;return Object(jsx_runtime.jsx)("rect",{x:x-size,y:y-size,width:2*size,height:2*size,fill:fill})}function Triangle(_ref3){var x=_ref3.x,y=_ref3.y,fill=_ref3.fill,size=_ref3.size,height=y+size;return Object(jsx_runtime.jsx)("polygon",{points:"".concat(x-size,",").concat(height," ").concat(x+size,",").concat(height," ").concat(x,",").concat(y-size),fill:fill})}Circle.displayName="Circle",Square.displayName="Square",Triangle.displayName="Triangle";try{Circle.displayName="Circle",Circle.__docgenInfo={description:"",displayName:"Circle",props:{x:{defaultValue:null,description:"",name:"x",required:!0,type:{name:"number"}},y:{defaultValue:null,description:"",name:"y",required:!0,type:{name:"number"}},fill:{defaultValue:null,description:"",name:"fill",required:!0,type:{name:"string"}},size:{defaultValue:null,description:"",name:"size",required:!0,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Markers.tsx#Circle"]={docgenInfo:Circle.__docgenInfo,name:"Circle",path:"src/components/Markers.tsx#Circle"})}catch(__react_docgen_typescript_loader_error){}try{Square.displayName="Square",Square.__docgenInfo={description:"",displayName:"Square",props:{x:{defaultValue:null,description:"",name:"x",required:!0,type:{name:"number"}},y:{defaultValue:null,description:"",name:"y",required:!0,type:{name:"number"}},fill:{defaultValue:null,description:"",name:"fill",required:!0,type:{name:"string"}},size:{defaultValue:null,description:"",name:"size",required:!0,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Markers.tsx#Square"]={docgenInfo:Square.__docgenInfo,name:"Square",path:"src/components/Markers.tsx#Square"})}catch(__react_docgen_typescript_loader_error){}try{Triangle.displayName="Triangle",Triangle.__docgenInfo={description:"",displayName:"Triangle",props:{x:{defaultValue:null,description:"",name:"x",required:!0,type:{name:"number"}},y:{defaultValue:null,description:"",name:"y",required:!0,type:{name:"number"}},fill:{defaultValue:null,description:"",name:"fill",required:!0,type:{name:"string"}},size:{defaultValue:null,description:"",name:"size",required:!0,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Markers.tsx#Triangle"]={docgenInfo:Triangle.__docgenInfo,name:"Triangle",path:"src/components/Markers.tsx#Triangle"})}catch(__react_docgen_typescript_loader_error){}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function LineSeries_slicedToArray(arr,i){return function LineSeries_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function LineSeries_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function LineSeries_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return LineSeries_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return LineSeries_arrayLikeToArray(o,minLen)}(arr,i)||function LineSeries_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function LineSeries_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var markersComps={circle:Circle,square:Square,triangle:Triangle};function LineSeries(props){var id=LineSeries_slicedToArray(Object(react.useState)((function(){return"series-".concat(function getNextId(){return++currentValue}())})),1)[0],data=props.data,label=props.label,otherProps=_objectWithoutProperties(props,["data","label"]),dispatch=useDispatchContext().dispatch;return Object(react.useEffect)((function(){var _extent2=LineSeries_slicedToArray(Object(extent.a)(data.x),2),xMin=_extent2[0],xMax=_extent2[1],_extent4=LineSeries_slicedToArray(Object(extent.a)(data.y),2),yMin=_extent4[0],yMax=_extent4[1];return dispatch({type:"newData",value:{id:id,xMin:xMin,xMax:xMax,yMin:yMin,yMax:yMax,label:label}}),function(){return dispatch({type:"removeData",value:{id:id}})}}),[data,label,dispatch,id]),Object(jsx_runtime.jsx)(LineSeriesRender,Object.assign({},otherProps,{data:data,id:id}))}function LineSeriesRender(_ref){var id=_ref.id,data=_ref.data,lineStyle=_ref.lineStyle,displayMarker=_ref.displayMarker,_ref$markerShape=_ref.markerShape,markerShape=void 0===_ref$markerShape?"circle":_ref$markerShape,_ref$markerSize=_ref.markerSize,markerSize=void 0===_ref$markerSize?3:_ref$markerSize,_usePlotContext=usePlotContext(),xScale=_usePlotContext.xScale,yScale=_usePlotContext.yScale,color=(0,_usePlotContext.colorScaler)(id),_useMemo2=LineSeries_slicedToArray(Object(react.useMemo)((function(){if([xScale,yScale].includes(void 0)||data.x.length!==data.y.length)return[null,null];for(var series=[],index=0;index<data.x.length;index++){var x=xScale(data.x[index]),y=yScale(data.y[index]);series.push({x:x,y:y})}var lineGenerator=Object(line.a)().x((function(d){return d.x})).y((function(d){return d.y})),Marker=markersComps[markerShape],markers=displayMarker?series.map((function(_ref2,i){var x=_ref2.x,y=_ref2.y;return Object(jsx_runtime.jsx)(Marker,{x:x,y:y,size:markerSize,fill:color},"markers-".concat(i))})):null;return[lineGenerator(series),markers]}),[xScale,yScale,color,data,displayMarker,markerSize,markerShape]),2),path=_useMemo2[0],markers=_useMemo2[1];if([xScale,yScale].includes(null))return null;var style=Object.assign({stroke:color,strokeWidth:2},lineStyle);return Object(jsx_runtime.jsxs)("g",{children:[markers,Object(jsx_runtime.jsx)("path",{style:style,d:path,fill:"none"})]})}LineSeries.displayName="LineSeries",LineSeriesRender.displayName="LineSeriesRender";try{LineSeries.displayName="LineSeries",LineSeries.__docgenInfo={description:"",displayName:"LineSeries",props:{data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"Series"}},lineStyle:{defaultValue:null,description:"",name:"lineStyle",required:!1,type:{name:"CSSProperties"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},displayMarker:{defaultValue:null,description:"",name:"displayMarker",required:!1,type:{name:"boolean"}},markerShape:{defaultValue:null,description:"",name:"markerShape",required:!1,type:{name:"enum",value:[{value:'"circle"'},{value:'"square"'},{value:'"triangle"'}]}},markerSize:{defaultValue:null,description:"",name:"markerSize",required:!1,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/LineSeries.tsx#LineSeries"]={docgenInfo:LineSeries.__docgenInfo,name:"LineSeries",path:"src/components/LineSeries.tsx#LineSeries"})}catch(__react_docgen_typescript_loader_error){}var src_axis=__webpack_require__(1131),src_select=__webpack_require__(1128),XAxis_XAxis=function XAxis(_ref){var label=_ref.label,_ref$fontSize=_ref.fontSize,fontSize=void 0===_ref$fontSize?16:_ref$fontSize,_ref$labelSpace=_ref.labelSpace,labelSpace=void 0===_ref$labelSpace?20:_ref$labelSpace,showGridLines=_ref.showGridLines,labelStyle=_ref.labelStyle,min=_ref.min,max=_ref.max,_ref$paddingLeft=_ref.paddingLeft,paddingLeft=void 0===_ref$paddingLeft?0:_ref$paddingLeft,_ref$paddingRight=_ref.paddingRight,paddingRight=void 0===_ref$paddingRight?0:_ref$paddingRight,_ref$display=_ref.display,display=void 0===_ref$display||_ref$display,_ref$flip=_ref.flip,flip=void 0!==_ref$flip&&_ref$flip,_ref$tickStyle=_ref.tickStyle,tickStyle=void 0===_ref$tickStyle?{}:_ref$tickStyle,axisRef=Object(react.useRef)(null),_usePlotContext=usePlotContext(),xScale=_usePlotContext.xScale,xScientific=_usePlotContext.xScientific,plotHeight=_usePlotContext.plotHeight,plotWidth=_usePlotContext.plotWidth,bottom=_usePlotContext.bottom,left=_usePlotContext.left,height=_usePlotContext.height,width=_usePlotContext.width,dispatch=useDispatchContext().dispatch;return Object(react.useEffect)((function(){dispatch({type:"xMinMax",value:{min:min,max:max}})}),[dispatch,min,max]),Object(react.useEffect)((function(){dispatch({type:"flip",value:{flip:flip,axis:"x"}})}),[dispatch,flip]),Object(react.useEffect)((function(){if(paddingLeft<0||paddingLeft>1)throw new Error("Padding left (".concat(paddingLeft,") is not between 0 and 1"));if(paddingRight<0||paddingRight>1)throw new Error("Padding right (".concat(paddingRight,") is not between 0 and 1"));dispatch({type:"xPadding",value:{min:paddingLeft,max:paddingRight}})}),[dispatch,paddingLeft,paddingRight]),Object(react.useEffect)((function(){if(null!=axisRef&&axisRef.current&&xScale){var axis=Object(src_axis.a)(xScale);showGridLines&&axis.tickSizeInner(-plotHeight),xScientific&&axis.tickFormat((function(val){return val.toExponential(2)})),Object(src_select.a)(axisRef.current).call(axis).call((function(g){g.selectAll(".tick line").attr("stroke-opacity",showGridLines?.5:1).attr("stroke-dasharray",showGridLines?"2,2":"0").style("display",display||showGridLines?"inline":"none");var text=g.selectAll(".tick text").attr("transform","translate(0,".concat(showGridLines?6:0,")")).style("user-select","none").style("display",display?"inline":"none");for(var key in tickStyle)text.style(camelToKebab(key),tickStyle[key]);xScientific&&g.selectAll(".tick:nth-child(odd) text").style("display","none"),g.selectAll("path.domain").style("display",display?"inline":"none")}))}}),[axisRef,xScale,plotHeight,height,width,showGridLines,xScientific,display,tickStyle]),Object(jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[Object(jsx_runtime.jsx)("g",{ref:axisRef,transform:"translate(0, ".concat(height-bottom,")")}),label&&display&&Object(jsx_runtime.jsx)("text",{x:plotWidth/2+left,y:height-bottom+labelSpace+fontSize,fontSize:fontSize,textAnchor:"middle",style:labelStyle,children:label})]})},components_XAxis=XAxis_XAxis;try{XAxis_XAxis.displayName="XAxis",XAxis_XAxis.__docgenInfo={description:"",displayName:"XAxis",props:{paddingLeft:{defaultValue:{value:0},description:"",name:"paddingLeft",required:!1,type:{name:"number"}},paddingRight:{defaultValue:{value:0},description:"",name:"paddingRight",required:!1,type:{name:"number"}},fontSize:{defaultValue:{value:16},description:"",name:"fontSize",required:!1,type:{name:"number"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},showGridLines:{defaultValue:null,description:"",name:"showGridLines",required:!1,type:{name:"boolean"}},labelStyle:{defaultValue:null,description:"",name:"labelStyle",required:!1,type:{name:"CSSProperties"}},tickStyle:{defaultValue:{value:"{}"},description:"",name:"tickStyle",required:!1,type:{name:"CSSProperties"}},labelSpace:{defaultValue:{value:20},description:"",name:"labelSpace",required:!1,type:{name:"number"}},min:{defaultValue:null,description:"",name:"min",required:!1,type:{name:"number"}},max:{defaultValue:null,description:"",name:"max",required:!1,type:{name:"number"}},display:{defaultValue:{value:!0},description:"",name:"display",required:!1,type:{name:"boolean"}},flip:{defaultValue:{value:!1},description:"",name:"flip",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/XAxis.tsx#XAxis"]={docgenInfo:XAxis_XAxis.__docgenInfo,name:"XAxis",path:"src/components/XAxis.tsx#XAxis"})}catch(__react_docgen_typescript_loader_error){}var YAxis_YAxis=function YAxis(_ref){var label=_ref.label,_ref$fontSize=_ref.fontSize,fontSize=void 0===_ref$fontSize?16:_ref$fontSize,_ref$labelSpace=_ref.labelSpace,labelSpace=void 0===_ref$labelSpace?30:_ref$labelSpace,showGridLines=_ref.showGridLines,labelStyle=_ref.labelStyle,min=_ref.min,max=_ref.max,_ref$paddingBottom=_ref.paddingBottom,paddingBottom=void 0===_ref$paddingBottom?0:_ref$paddingBottom,_ref$paddingTop=_ref.paddingTop,paddingTop=void 0===_ref$paddingTop?0:_ref$paddingTop,_ref$display=_ref.display,display=void 0===_ref$display||_ref$display,_ref$flip=_ref.flip,flip=void 0!==_ref$flip&&_ref$flip,_ref$tickStyle=_ref.tickStyle,tickStyle=void 0===_ref$tickStyle?{}:_ref$tickStyle,axisRef=Object(react.useRef)(null),_usePlotContext=usePlotContext(),yScale=_usePlotContext.yScale,yScientific=_usePlotContext.yScientific,plotHeight=_usePlotContext.plotHeight,plotWidth=_usePlotContext.plotWidth,left=_usePlotContext.left,top=_usePlotContext.top,width=_usePlotContext.width,dispatch=useDispatchContext().dispatch;return Object(react.useEffect)((function(){dispatch({type:"yMinMax",value:{min:min,max:max}})}),[dispatch,min,max]),Object(react.useEffect)((function(){dispatch({type:"flip",value:{flip:flip,axis:"y"}})}),[dispatch,flip]),Object(react.useEffect)((function(){if(paddingBottom<0||paddingBottom>1)throw new Error("Padding bottom (".concat(paddingBottom,") is not between 0 and 1"));if(paddingTop<0||paddingTop>1)throw new Error("Padding top (".concat(paddingTop,") is not between 0 and 1"));dispatch({type:"yPadding",value:{min:paddingBottom,max:paddingTop}})}),[dispatch,paddingBottom,paddingTop]),Object(react.useEffect)((function(){if(null!=axisRef&&axisRef.current&&yScale){var axis=Object(src_axis.b)(yScale);showGridLines&&axis.tickSizeInner(-plotWidth),yScientific&&axis.tickFormat((function(val){return val.toExponential(2)})),Object(src_select.a)(axisRef.current).call(axis).call((function(g){g.selectAll(".tick line").attr("stroke-opacity",showGridLines?.5:1).attr("stroke-dasharray",showGridLines?"2,2":"0").style("display",display||showGridLines?"inline":"none");var text=g.selectAll(".tick text").attr("transform","translate(".concat(showGridLines?-6:0,",0)")).style("user-select","none").style("display",display?"inline":"none");for(var key in tickStyle)text.style(camelToKebab(key),tickStyle[key]);g.selectAll("path.domain").style("display",display?"inline":"none")}))}}),[axisRef,yScale,plotWidth,width,showGridLines,yScientific,display,tickStyle]),Object(jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[Object(jsx_runtime.jsx)("g",{ref:axisRef,transform:"translate(".concat(left,", 0)")}),label&&display&&Object(jsx_runtime.jsx)("text",{transform:"translate(".concat(left-fontSize-labelSpace-(yScientific?14:0),", ").concat(top+plotHeight/2,")rotate(-90)"),dy:fontSize,textAnchor:"middle",fontSize:fontSize,style:labelStyle,children:label})]})},components_YAxis=YAxis_YAxis;try{YAxis_YAxis.displayName="YAxis",YAxis_YAxis.__docgenInfo={description:"",displayName:"YAxis",props:{paddingTop:{defaultValue:{value:0},description:"",name:"paddingTop",required:!1,type:{name:"number"}},paddingBottom:{defaultValue:{value:0},description:"",name:"paddingBottom",required:!1,type:{name:"number"}},fontSize:{defaultValue:{value:16},description:"",name:"fontSize",required:!1,type:{name:"number"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},showGridLines:{defaultValue:null,description:"",name:"showGridLines",required:!1,type:{name:"boolean"}},labelStyle:{defaultValue:null,description:"",name:"labelStyle",required:!1,type:{name:"CSSProperties"}},tickStyle:{defaultValue:{value:"{}"},description:"",name:"tickStyle",required:!1,type:{name:"CSSProperties"}},labelSpace:{defaultValue:{value:30},description:"",name:"labelSpace",required:!1,type:{name:"number"}},min:{defaultValue:null,description:"",name:"min",required:!1,type:{name:"number"}},max:{defaultValue:null,description:"",name:"max",required:!1,type:{name:"number"}},display:{defaultValue:{value:!0},description:"",name:"display",required:!1,type:{name:"boolean"}},flip:{defaultValue:{value:!1},description:"",name:"flip",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/YAxis.tsx#YAxis"]={docgenInfo:YAxis_YAxis.__docgenInfo,name:"YAxis",path:"src/components/YAxis.tsx#YAxis"})}catch(__react_docgen_typescript_loader_error){}function _wrapRegExp(re,groups){_wrapRegExp=function _wrapRegExp(re,groups){return new BabelRegExp(re,void 0,groups)};var _RegExp=_wrapNativeSuper(RegExp),_super=RegExp.prototype,_groups=new WeakMap;function BabelRegExp(re,flags,groups){var _this=_RegExp.call(this,re,flags);return _groups.set(_this,groups||_groups.get(re)),_this}function buildGroups(result,re){var g=_groups.get(re);return Object.keys(g).reduce((function(groups,name){return groups[name]=result[g[name]],groups}),Object.create(null))}return _inherits(BabelRegExp,_RegExp),BabelRegExp.prototype.exec=function(str){var result=_super.exec.call(this,str);return result&&(result.groups=buildGroups(result,this)),result},BabelRegExp.prototype[Symbol.replace]=function(str,substitution){if("string"==typeof substitution){var groups=_groups.get(this);return _super[Symbol.replace].call(this,str,substitution.replace(/\$<([^>]+)>/g,(function(_,name){return"$"+groups[name]})))}if("function"==typeof substitution){var _this=this;return _super[Symbol.replace].call(this,str,(function(){var args=[];return args.push.apply(args,arguments),"object"!==_typeof(args[args.length-1])&&args.push(buildGroups(args,_this)),substitution.apply(this,args)}))}return _super[Symbol.replace].call(this,str,substitution)},_wrapRegExp.apply(this,arguments)}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}function _wrapNativeSuper(Class){var _cache="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function _wrapNativeSuper(Class){if(null===Class||!function _isNativeFunction(fn){return-1!==Function.toString.call(fn).indexOf("[native code]")}(Class))return Class;if("function"!=typeof Class)throw new TypeError("Super expression must either be null or a function");if(void 0!==_cache){if(_cache.has(Class))return _cache.get(Class);_cache.set(Class,Wrapper)}function Wrapper(){return _construct(Class,arguments,_getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(Class.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(Wrapper,Class)})(Class)}function _construct(Parent,args,Class){return(_construct=_isNativeReflectConstruct()?Reflect.construct:function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var instance=new(Function.bind.apply(Parent,a));return Class&&_setPrototypeOf(instance,Class.prototype),instance}).apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function utils_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return utils_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return utils_arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function utils_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var currentValue=1;function camelToKebab(string){return string.replace(_wrapRegExp(/([0-9a-z]|(?=[A-Z]))([A-Z])/g,{lower:1,upper:2}),"$<lower>-$<upper>").toLowerCase()}function Plot_slicedToArray(arr,i){return function Plot_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function Plot_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||Plot_unsupportedIterableToArray(arr,i)||function Plot_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return Plot_arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||Plot_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Plot_unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return Plot_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Plot_arrayLikeToArray(o,minLen):void 0}}function Plot_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function reducer(state,action){switch(action.type){case"newData":var series=state.series,serieItem=action.value;return Object.assign({},state,{series:[].concat(_toConsumableArray(series),[serieItem])});case"removeData":var id=action.value.id,seriesFiltered=state.series.filter((function(series){return series.id!==id}));return Object.assign({},state,{series:seriesFiltered});case"xMinMax":var _action$value=action.value,xMin=_action$value.min,xMax=_action$value.max;return Object.assign({},state,{xMin:xMin,xMax:xMax});case"yMinMax":var _action$value2=action.value,yMin=_action$value2.min,yMax=_action$value2.max;return Object.assign({},state,{yMin:yMin,yMax:yMax});case"xPadding":var _action$value3=action.value,paddingLeft=_action$value3.min,paddingRight=_action$value3.max;return Object.assign({},state,{paddingLeft:paddingLeft,paddingRight:paddingRight});case"yPadding":var _action$value4=action.value,paddingBottom=_action$value4.min,paddingTop=_action$value4.max;return Object.assign({},state,{paddingBottom:paddingBottom,paddingTop:paddingTop});case"flip":var _action$value5=action.value,flip=_action$value5.flip,axis=_action$value5.axis;return Object.assign({},state,function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}({},"x"===axis?"xFlip":"yFlip",flip));default:throw new Error}}function Plot(_ref){var width=_ref.width,height=_ref.height,_ref$margin=_ref.margin,margin=void 0===_ref$margin?{}:_ref$margin,colorScheme=_ref.colorScheme,children=_ref.children,_useReducer2=Plot_slicedToArray(Object(react.useReducer)(reducer,{series:[],paddingLeft:0,paddingRight:0,paddingTop:0,paddingBottom:0,xFlip:!1,yFlip:!1},void 0),2),state=_useReducer2[0],dispatch=_useReducer2[1],compoundComp=function splitChildren(children){var _step,invalidChild=!1,lineSeries=[],axis={x:null,y:null},heading=null,legend=null,_iterator=_createForOfIteratorHelper(react_default.a.Children.toArray(children));try{for(_iterator.s();!(_step=_iterator.n()).done;){var child=_step.value;"object"===_typeof(child)&&react_default.a.isValidElement(child)?child.type===LineSeries?lineSeries.push(child):child.type===components_XAxis?axis.x=child:child.type===components_YAxis?axis.y=child:child.type===Heading?heading=child:child.type===Legend?legend=child:invalidChild=!0:invalidChild=!0}}catch(err){_iterator.e(err)}finally{_iterator.f()}return{invalidChild:invalidChild,lineSeries:lineSeries,axis:axis,heading:heading,legend:legend}}(children),invalidChild=compoundComp.invalidChild,lineSeries=compoundComp.lineSeries,axis=compoundComp.axis,heading=compoundComp.heading,legend=compoundComp.legend;if(invalidChild)throw new Error("Only compound components of Plot are displayed");var _margin$left=margin.left,left=void 0===_margin$left?0:_margin$left,_margin$right=margin.right,right=void 0===_margin$right?0:_margin$right,_margin$top=margin.top,top=void 0===_margin$top?0:_margin$top,_margin$bottom=margin.bottom,bottom=void 0===_margin$bottom?0:_margin$bottom,plotWidth=width-left-right,plotHeight=height-top-bottom,_useMemo=Object(react.useMemo)((function(){var xMin=void 0!==state.xMin?state.xMin:Object(src_min.a)(state.series,(function(d){return d.xMin})),xMax=void 0!==state.xMax?state.xMax:Object(src_max.a)(state.series,(function(d){return d.xMax}));if([xMin,xMax].includes(void 0))return{};if(xMin>xMax)throw new Error("X: min (".concat(xMin,") is bigger than max (").concat(xMax,")"));var leftPad=(xMax-xMin)*state.paddingLeft,rightPad=(xMax-xMin)*state.paddingRight;return{xMin:xMin,xMax:xMax,xScale:Object(linear.a)().domain([xMin-leftPad,xMax+rightPad]).range(state.xFlip?[width-right,left]:[left,width-right])}}),[state,left,right,width]),xScale=_useMemo.xScale,xMin=_useMemo.xMin,xMax=_useMemo.xMax,_useMemo2=Object(react.useMemo)((function(){var yMin=void 0!==state.yMin?state.yMin:Object(src_min.a)(state.series,(function(d){return d.yMin})),yMax=void 0!==state.yMax?state.yMax:Object(src_max.a)(state.series,(function(d){return d.yMax}));if([yMin,yMax].includes(void 0))return{};if(yMin>yMax)throw new Error("Y: min (".concat(yMin,") is bigger than max (").concat(yMax,")"));var topPad=(yMax-yMin)*state.paddingTop,bottomPad=(yMax-yMin)*state.paddingBottom;return{yMin:yMin,yMax:yMax,yScale:Object(linear.a)().domain([yMin-bottomPad,yMax+topPad]).range(state.yFlip?[top,height-bottom]:[height-bottom,top])}}),[state,bottom,top,height]),yScale=_useMemo2.yScale,yMin=_useMemo2.yMin,yMax=_useMemo2.yMax,labels=Object(react.useMemo)((function(){return state.series.map((function(_ref2){return _ref2.label}))}),[state.series]),ids=Object(react.useMemo)((function(){return state.series.map((function(_ref3){return _ref3.id}))}),[state.series]),colorScaler=Object(react.useMemo)((function(){return Object(ordinal.a)().range(colorScheme||Set1.a).domain(ids)}),[colorScheme,ids]),xDiff=xMax-xMin,yDiff=yMax-yMin;return Object(jsx_runtime.jsx)(PlotContext.Provider,{value:{xScale:xScale,yScale:yScale,width:width,height:height,left:left,right:right,top:top,bottom:bottom,plotWidth:plotWidth,plotHeight:plotHeight,labels:labels,colorScaler:colorScaler,xScientific:xDiff<=.01||xDiff>=1e3,yScientific:yDiff<=.01||yDiff>=1e3},children:Object(jsx_runtime.jsx)(DispatchContext.Provider,{value:{dispatch:dispatch},children:Object(jsx_runtime.jsxs)("svg",{width:width,height:height,style:{fontFamily:"Arial, Helvetica, sans-serif"},children:[heading,legend,axis.x,axis.y,Object(jsx_runtime.jsx)("clipPath",{id:"squareClip",children:Object(jsx_runtime.jsx)("rect",{fillOpacity:"0",x:left,y:top,width:plotWidth,height:plotHeight})}),Object(jsx_runtime.jsx)("g",{style:{clipPath:"url(#squareClip)"},children:lineSeries})]})})})}Plot.displayName="Plot";try{Plot.displayName="Plot",Plot.__docgenInfo={description:"",displayName:"Plot",props:{width:{defaultValue:null,description:"",name:"width",required:!0,type:{name:"number"}},height:{defaultValue:null,description:"",name:"height",required:!0,type:{name:"number"}},colorScheme:{defaultValue:null,description:"",name:"colorScheme",required:!1,type:{name:"Iterable<string>"}},margin:{defaultValue:{value:"{}"},description:"",name:"margin",required:!1,type:{name:'Partial<Record<"top" | "bottom" | "right" | "left", number>>'}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Plot.tsx#Plot"]={docgenInfo:Plot.__docgenInfo,name:"Plot",path:"src/Plot.tsx#Plot"})}catch(__react_docgen_typescript_loader_error){}},485:function(module,exports,__webpack_require__){__webpack_require__(486),__webpack_require__(657),__webpack_require__(658),__webpack_require__(814),__webpack_require__(1033),__webpack_require__(1065),__webpack_require__(1070),__webpack_require__(1082),__webpack_require__(1084),__webpack_require__(1089),__webpack_require__(1091),module.exports=__webpack_require__(1095)},560:function(module,exports){},658:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(361)}},[[485,1,2]]]);
//# sourceMappingURL=main.c1410d9c1afaab8b986c.bundle.js.map